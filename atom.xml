<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JunYiZzz</title>
  
  <subtitle>Stay Hungry, Stay Foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://junyizzz.github.io/"/>
  <updated>2018-11-29T03:07:27.325Z</updated>
  <id>https://junyizzz.github.io/</id>
  
  <author>
    <name>JunYiZzz</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript数组操作</title>
    <link href="https://junyizzz.github.io/Array-Operation/"/>
    <id>https://junyizzz.github.io/Array-Operation/</id>
    <published>2018-11-29T03:05:24.000Z</published>
    <updated>2018-11-29T03:07:27.325Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h1><h2 id="js变量类型"><a href="#js变量类型" class="headerlink" title="js变量类型"></a>js变量类型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"student"</span>,age=<span class="number">12</span>;            <span class="comment">//underfined、null、boolean、string、number为基本数值类型。逗号一并定义初始化多个变量。基本包装类型String、Boolean、Number通过valueOf()可以获取基本数值类型，可以实现自动装箱和拆箱操作。</span></span><br></pre></td></tr></table></figure><h2 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names=[];                           <span class="comment">//定义数组并初始化为空</span></span><br><span class="line">names = [<span class="string">"小明"</span>,<span class="string">"小红"</span>,<span class="string">"小刚"</span>];           <span class="comment">//赋值，可以在定义时赋值</span></span><br><span class="line">names = <span class="keyword">new</span> <span class="built_in">Array</span>();                    <span class="comment">//定义数组并初始化为空</span></span><br><span class="line">names=<span class="keyword">new</span> <span class="built_in">Array</span>(names.length);          <span class="comment">//数组基类为Array，属性length为数组长度</span></span><br><span class="line">names = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'小明'</span>,<span class="string">'小红'</span>,<span class="string">'小刚'</span>);  <span class="comment">//字符串不区分单双引号，只要配对使用就行</span></span><br></pre></td></tr></table></figure><h2 id="增删查改"><a href="#增删查改" class="headerlink" title="增删查改"></a><strong>增删查改</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//元素增加</span></span><br><span class="line">names[<span class="number">4</span>]=<span class="string">"小胡"</span>;                         <span class="comment">//通过赋值，直接添加了两项，null和“小胡”</span></span><br><span class="line">names.unshift(<span class="string">"小李"</span>,<span class="string">"小兰"</span>);             <span class="comment">//首部添加</span></span><br><span class="line">names.push(<span class="string">"小李"</span>,<span class="string">"小兰"</span>);                <span class="comment">//末尾添加</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//元素删除</span></span><br><span class="line"><span class="keyword">var</span> item = names.pop();                  <span class="comment">//删除获取最后一项</span></span><br><span class="line">item=names.shift();                      <span class="comment">//删除获取第一项</span></span><br><span class="line">names.splice(<span class="number">2</span>,<span class="number">1</span>,<span class="string">"小季"</span>,<span class="string">"小明"</span>);          <span class="comment">//删除添加数据，修改源数组，第一个参数表示开始删除的位(包含),第二个参数表示要删除的数目，后面参数表示在删除位置处添加的元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//元素读取查找</span></span><br><span class="line"><span class="keyword">var</span> nameitem=names[<span class="number">2</span>];                  <span class="comment">//使用[]读取数组，这是最简单的读取方式</span></span><br><span class="line">names = names.slice(<span class="number">-4</span>,<span class="number">6</span>);              <span class="comment">//读取数组段，不修改源数组，负数表示从右向左数，-1表示末尾第一个元素，0表示首部第一个元素。只有一个参数时表示直到末尾。读取索引包含第一个参数不包含第二个参数</span></span><br><span class="line">names.indexOf(<span class="string">"小明"</span>);                    <span class="comment">//查找匹配元素的位置，没有找到返回-1，lastindexof表示最后匹配的位置。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组的拼接和字符串表示</span></span><br><span class="line">names=names.concat(<span class="string">"小王"</span>,[<span class="string">"小明"</span>,<span class="string">"小黑"</span>]); <span class="comment">//拼接数组，不修改源数组，所以要赋值</span></span><br><span class="line"><span class="keyword">var</span> str=stringnames.join(<span class="string">","</span>);            <span class="comment">//使用间隔字符串连接数组</span></span><br></pre></td></tr></table></figure><p><strong>遍历</strong> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> boolresult = names.every(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;   <span class="comment">//对数组中元素每一项进行布尔运算，返回false和true。every函数，全部元素返回true时返回true。some函数某一元素返回true时返回true</span></span><br><span class="line">    <span class="keyword">return</span> (index&gt;<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> nameresult = names.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;   <span class="comment">//返回数组，filter函数获取满足条件的项，map函数获取每一项计算值的集合，不改变原数组，forEach函数等价于for语句，对每项处理</span></span><br><span class="line">    <span class="keyword">return</span> (index&gt;<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line">nameresult = names.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,cur,index,array</span>)</span>&#123;   <span class="comment">//reduce从前向后迭代，reduceRight从后向前迭代。</span></span><br><span class="line">    <span class="keyword">return</span> prev+<span class="string">"+"</span>+cur;                                    <span class="comment">//迭代从第二项开始，prev初始值为第一项，cur初始值为第二项。计算值自动传给下一函数的prev，返回最后一次迭代产生的值</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a><strong>排序</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">names.reverse();                        <span class="comment">//数组取反</span></span><br><span class="line">names.sort();                           <span class="comment">//数组排序sort(compare)，参数可为排序函数,空元素将排到最后</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">student1,student2</span>)</span>&#123;    <span class="comment">//比较函数，返回-1,0,1</span></span><br><span class="line">    <span class="comment">//return student1.age&lt;student2.age?-1:(student1.age==student2.age?0:1);   //-1表示前对象小，1表示后对象小，0表示相等</span></span><br><span class="line">    <span class="keyword">return</span> student2.age-student1.age;  <span class="comment">//正数自动转化为1，负数转化为-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组原型"><a href="#数组原型" class="headerlink" title="数组原型"></a><strong>数组原型</strong></h2><p>自定义数组原型函数，实现为所有数组添加功能 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">array_max</span>(<span class="params"> </span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>,<span class="keyword">this</span>);    <span class="comment">//max取最大值，min取最小值。还有很多数学运算</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Array</span>.prototype.max = array_max;         <span class="comment">//重写数组原型链</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);     <span class="comment">//应用自定义原型函数</span></span><br><span class="line"><span class="keyword">var</span> y = x.max( );</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数组操作&quot;&gt;&lt;a href=&quot;#数组操作&quot; class=&quot;headerlink&quot; title=&quot;数组操作&quot;&gt;&lt;/a&gt;数组操作&lt;/h1&gt;&lt;h2 id=&quot;js变量类型&quot;&gt;&lt;a href=&quot;#js变量类型&quot; class=&quot;headerlink&quot; title=&quot;js变量类
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://junyizzz.github.io/categories/JavaScript/"/>
    
    
      <category term="Array" scheme="https://junyizzz.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript对象</title>
    <link href="https://junyizzz.github.io/JavaScript-Object/"/>
    <id>https://junyizzz.github.io/JavaScript-Object/</id>
    <published>2018-11-29T02:16:39.000Z</published>
    <updated>2018-11-29T03:02:25.607Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、String对象"><a href="#一、String对象" class="headerlink" title="一、String对象"></a>一、String对象</h1><h2 id="字符串的生成转换"><a href="#字符串的生成转换" class="headerlink" title="字符串的生成转换"></a><strong>字符串的生成转换</strong></h2><p>你可以将任何类型的数据都转换为字符串，你可以用下面三种方法的任何一种：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num= <span class="number">19</span>;                    <span class="comment">// 19</span></span><br><span class="line"><span class="keyword">var</span> myStr = num.toString();     <span class="comment">// "19"</span></span><br><span class="line"><span class="keyword">var</span> myStr = <span class="built_in">String</span>(num);        <span class="comment">// "19"</span></span><br><span class="line"><span class="keyword">var</span> myStr = <span class="string">""</span> +num;            <span class="comment">// "19"</span></span><br></pre></td></tr></table></figure><h2 id="字符串转化为其他类型"><a href="#字符串转化为其他类型" class="headerlink" title="字符串转化为其他类型"></a><strong>字符串转化为其他类型</strong></h2><p>js提供了parseInt()和parseFloat()两个转换函数，Number也可以实现转化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">"1234blue"</span>);   <span class="comment">//returns 1234 </span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"0xA"</span>);        <span class="comment">//returns 10 </span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"22.5"</span>);       <span class="comment">//returns 22 </span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"blue"</span>);       <span class="comment">//returns NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10"</span>, <span class="number">2</span>);      <span class="comment">//returns 2 </span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10"</span>, <span class="number">8</span>);      <span class="comment">//returns 8 </span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10"</span>, <span class="number">10</span>);     <span class="comment">//returns 10</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"AF"</span>, <span class="number">16</span>);     <span class="comment">//returns 175 </span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"1234blue"</span>); <span class="comment">//returns 1234.0 //actually returns 1234</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"0xA"</span>);      <span class="comment">//returns NaN //actually returns 0</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"22.5"</span>);     <span class="comment">//returns 22.5 </span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"22.34.5"</span>);  <span class="comment">//returns 22.34 </span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"0908"</span>);     <span class="comment">//returns 908 </span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"blue"</span>);     <span class="comment">//returns NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">false</span>)           <span class="comment">//0 </span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">true</span>)            <span class="comment">//1 </span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>)       <span class="comment">//NaN </span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">null</span>)            <span class="comment">//0 </span></span><br><span class="line"><span class="built_in">Number</span>( <span class="string">"5.5 "</span>)         <span class="comment">//5.5 </span></span><br><span class="line"><span class="built_in">Number</span>( <span class="string">"56 "</span>)          <span class="comment">//56 </span></span><br><span class="line"><span class="built_in">Number</span>( <span class="string">"5.6.7 "</span>)       <span class="comment">//NaN </span></span><br><span class="line"><span class="built_in">Number</span>(<span class="keyword">new</span> <span class="built_in">Object</span>())    <span class="comment">//NaN </span></span><br><span class="line"><span class="built_in">Number</span>(<span class="number">100</span>)             <span class="comment">//100</span></span><br></pre></td></tr></table></figure><h2 id="字符的操作"><a href="#字符的操作" class="headerlink" title="字符的操作"></a><strong>字符的操作</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myStr = <span class="string">"I,love,you,Do,you,love,me"</span>;</span><br><span class="line"><span class="keyword">var</span> theChar = str.charAt(<span class="number">8</span>);                <span class="comment">//获取指定索引上的字符o</span></span><br><span class="line"><span class="keyword">var</span> theCharcode = myStr.charCodeAt(<span class="number">8</span>);      <span class="comment">//获取指定索引上的字符编码 111</span></span><br></pre></td></tr></table></figure><h3 id="字符串增删查改"><a href="#字符串增删查改" class="headerlink" title="字符串增删查改"></a><strong>字符串增删查改</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//替换</span></span><br><span class="line">name = <span class="string">" Muaneng Tuanpeng "</span>.trim();             <span class="comment">//trim()删除字符串前后空格</span></span><br><span class="line">name =name.replace(<span class="string">"eng"</span>,<span class="string">"ing"</span>);                <span class="comment">//replace替换第一个eng成ing。</span></span><br><span class="line">name =name.replace(<span class="regexp">/eng/g</span>,<span class="string">"ing"</span>);               <span class="comment">//replace接收正则表达式，/g替换全部。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line"><span class="keyword">var</span> beginindex=name.indexOf(<span class="string">"t"</span>,name.length<span class="number">-10</span>);<span class="comment">//indexOf和lastindexOf查询子字符串的位置,第二个参数表示从哪个索引开始向对面搜索。length函数表示取字符串的长度。未查询到时返回-1。</span></span><br><span class="line"><span class="keyword">var</span> endindex = name.lastIndexOf(<span class="string">"g"</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//截取</span></span><br><span class="line"><span class="keyword">var</span> subStr = name.slice(<span class="number">1</span>,<span class="number">5</span>);                   <span class="comment">//读取子字符串，起始下标（包含），结束下标（不包含）</span></span><br><span class="line">name1 = name.substring(beginindex,endindex);    <span class="comment">//slice、substring参数为首尾下标，substr为起点下标和长度。都不改变源字符串。</span></span><br><span class="line">name1 = name.substr(<span class="number">-4</span>);                        <span class="comment">//传入负值时，slice将负值加上字符串长度，substr将第一个负值加上字符串长度，第二个负值转为0，substring将负值都转为0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//拼接</span></span><br><span class="line">name1 = name+<span class="string">"Yes"</span>+<span class="number">1</span>;                           <span class="comment">//使用+号拼接字符串和数据成一个新的字符串</span></span><br><span class="line">name1 = name.concat(<span class="string">"yes"</span>);                     <span class="comment">//也可以使用concat函数拼接字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//大小写转换</span></span><br><span class="line"><span class="keyword">var</span> lowCaseStr = name.toLowerCase();            <span class="comment">//全部转换为小写</span></span><br><span class="line"><span class="keyword">var</span> upCaseStr = name.toUpperCase();             <span class="comment">//全部转化为大写</span></span><br></pre></td></tr></table></figure><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a><strong>字符串比较</strong></h3><p>比较两个字符串，比较是规则是按照字母表顺序比较的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myStr = <span class="string">"chicken"</span>;</span><br><span class="line"><span class="keyword">var</span> myStrTwo = <span class="string">"egg"</span>;</span><br><span class="line"><span class="keyword">var</span> first = myStr.localeCompare(myStrTwo);      <span class="comment">// -1，表示小于</span></span><br><span class="line">first = myStr.localeCompare(<span class="string">"chicken"</span>);         <span class="comment">// 0，表示等于</span></span><br><span class="line">first = myStr.localeCompare(<span class="string">"apple"</span>);           <span class="comment">// 1，表示大于</span></span><br></pre></td></tr></table></figure><h3 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a><strong>字符串分割</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myStr = <span class="string">"I,Love,You,Do,you,love,me"</span>;</span><br><span class="line"><span class="keyword">var</span> substrArray = myStr .split(<span class="string">","</span>);            <span class="comment">// ["I", "Love", "You", "Do", "you", "love", "me"];</span></span><br><span class="line"><span class="keyword">var</span> arrayLimited = myStr .split(<span class="string">","</span>, <span class="number">3</span>)[<span class="number">0</span>];     <span class="comment">// split()的第二个参数，表示返回的字符串数组的最大长度。这里取["I", "Love", "You"]数组的第一个元素，即"I";</span></span><br></pre></td></tr></table></figure><h3 id="字符串原型"><a href="#字符串原型" class="headerlink" title="字符串原型"></a><strong>字符串原型</strong></h3><p>通过修改字符串的原型，可以为所有字符串添加公共函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.startwith = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123;    <span class="comment">//设置字符串引用的原型，为String类型变量添加方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.indexOf(text)==<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> begin = name.startwith(<span class="string">"mu"</span>);               <span class="comment">//调用原型方法</span></span><br></pre></td></tr></table></figure><h1 id="二、Number对象"><a href="#二、Number对象" class="headerlink" title="二、Number对象"></a>二、Number对象</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">number.valueOf()：<span class="comment">//返回数学对象的原始值 </span></span><br><span class="line">number.toExponential(fractionDigits)：<span class="comment">//将数字转换为指数表示形式字符串，fractionDigits指定指数的小数位的位数, 取值区间[0,20].</span></span><br><span class="line">number.toFixed(fractionDigits)：<span class="comment">//将数字表示成10进制字符串, fractionDigits同上.</span></span><br><span class="line">number.toPrecision(precision)：<span class="comment">//与toFixed()类同, 只是precision指定的是数字的有效位数, 取值范围[0,21].</span></span><br><span class="line">number.toString(radix)：<span class="comment">//将number转换为需要的进制字符串形式，radix默认是10.</span></span><br></pre></td></tr></table></figure><h1 id="三、Object对象"><a href="#三、Object对象" class="headerlink" title="三、Object对象"></a>三、Object对象</h1><p>Object对象包含如下属性和方法，也就意味着一切对象（函数也是对象）都包含如下方法。  每种方法和属性在不同的对象中有不同的作用，并不是每种对象都有使用每个方法的必要。 </p><h2 id="constructor属性"><a href="#constructor属性" class="headerlink" title="constructor属性"></a><strong>constructor属性</strong></h2><p>constructor属性是保存当前对象的构造函数，js通过构造函数来实现对象的实例化。</p><p>下面的例子中，constructor保存的就是Object构造函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj1.id = <span class="string">"obj1"</span>;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  <span class="string">"id"</span>: <span class="string">"obj2"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj1.constructor);<span class="comment">//function Object()&#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2.constructor);<span class="comment">//function Object()&#123;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="hasOwnProperty-propertyName-方法"><a href="#hasOwnProperty-propertyName-方法" class="headerlink" title="hasOwnProperty(propertyName)方法"></a><strong>hasOwnProperty(propertyName)方法</strong></h2><p>hasOwnProperty方法接收一个字符串参数，该参数表示属性名称，用来判断该属性是否在当前对象实例中，而不是在对象的原型链中。我们来看看下面这个例子： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];    <span class="comment">//实例化了一个Array对象</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.hasOwnProperty(<span class="string">"length"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.hasOwnProperty(<span class="string">"hasOwnProperty"</span>));<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>在这个例子中，首先通过定义了一个数组对象的实例arr，我们知道数组对象实际是通过原型链继承了Object对象，然后拥有自己的一些属性，我们通过hasOwnProperty方法判断length是arr自己的属性，而hasOwnProperty是在原型链上的属性。 </p><h2 id="isPrototypeOf-Object-方法"><a href="#isPrototypeOf-Object-方法" class="headerlink" title="isPrototypeOf(Object)方法"></a><strong>isPrototypeOf(Object)方法</strong></h2><p>isPrototype方法接收一个对象，用来判断当前对象是否在传入的参数对象的原型链上，说起来有点抽象，我们来看看代码。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyObject</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> MyObject();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.isPrototypeOf(obj));  <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>我们知道MyObject是继承自Object对象的，而在JS中，继承是通过prototype来实现的，所以Object的prototype必定在MyObject对象实例的原型链上。 </p><h2 id="propertyIsEnumerable-prototypeName-方法"><a href="#propertyIsEnumerable-prototypeName-方法" class="headerlink" title="propertyIsEnumerable(prototypeName)方法"></a>propertyIsEnumerable(prototypeName)方法</h2><p>prototypeIsEnumerable用来判断给定的属性是否可以被for..in语句给枚举出来。看下面代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">"objName"</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(obj.propertyIsEnumerable(<span class="string">"constructor"</span>));<span class="comment">//false1234</span></span><br></pre></td></tr></table></figure><p>判断“constructor”是否可以被枚举，输出false说明无法被枚举出来。</p><h2 id="toLocaleString-方法"><a href="#toLocaleString-方法" class="headerlink" title="toLocaleString()方法"></a>toLocaleString()方法</h2><p>toLocalString方法返回对象的字符串表示，和代码的执行环境有关。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj.toLocaleString());<span class="comment">//[object Object] </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date.toLocaleString());<span class="comment">//2016/2/28 下午1:39:27</span></span><br></pre></td></tr></table></figure><h2 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString()方法"></a><strong>toString()方法</strong></h2><p>toString用来返回对象的字符串表示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj.toString());<span class="comment">//[object Object]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date.toString());<span class="comment">//Sun Feb 28 2016 13:40:36 GMT+0800 (中国标准时间）</span></span><br></pre></td></tr></table></figure><h2 id="valueOf-方法"><a href="#valueOf-方法" class="headerlink" title="valueOf()方法"></a><strong>valueOf()方法</strong></h2><p>valueOf方法返回对象的原始值，可能是字符串、数值或bool值等，看具体的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">"obj"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj.valueOf());<span class="comment">//Object &#123;name: "obj"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.valueOf());<span class="comment">//[1]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date.valueOf());<span class="comment">//1456638436303</span></span><br></pre></td></tr></table></figure><h1 id="四、Date对象"><a href="#四、Date对象" class="headerlink" title="四、Date对象"></a>四、Date对象</h1><p>var date = new Date();  </p><h2 id="属性"><a href="#属性" class="headerlink" title="属性:"></a>属性:</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span> //所建立对象的函数参考 </span><br><span class="line">prototype //能够为对象加入的属性和方法</span><br></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法:"></a>方法:</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">getDay() <span class="comment">//返回一周中的第几天(0-6) </span></span><br><span class="line">getYear() <span class="comment">//返回年份.2000年以前为2位,2000(包含)以后为4位 </span></span><br><span class="line">getFullYear() <span class="comment">//返回完整的4位年份数 </span></span><br><span class="line">getMonth() <span class="comment">//返回月份数(0-11) </span></span><br><span class="line">getDate() <span class="comment">//返回日(1-31) </span></span><br><span class="line">getHours() <span class="comment">//返回小时数(0-23) </span></span><br><span class="line">getMinutes() <span class="comment">//返回分钟(0-59) </span></span><br><span class="line">getSeconds() <span class="comment">//返回秒数(0-59) </span></span><br><span class="line">getMilliseconds() <span class="comment">//返回毫秒(0-999) </span></span><br><span class="line">getUTCDay() <span class="comment">//依据国际时间来得到现在是星期几(0-6) </span></span><br><span class="line">getUTCFullYear() <span class="comment">//依据国际时间来得到完整的年份 </span></span><br><span class="line">getUTCMonth() <span class="comment">//依据国际时间来得到月份(0-11) </span></span><br><span class="line">getUTCDate() <span class="comment">//依据国际时间来得到日(1-31) </span></span><br><span class="line">getUTCHours() <span class="comment">//依据国际时间来得到小时(0-23) </span></span><br><span class="line">getUTCMinutes() <span class="comment">//依据国际时间来返回分钟(0-59) </span></span><br><span class="line">getUTCSeconds() <span class="comment">//依据国际时间来返回秒(0-59) </span></span><br><span class="line">getUTCMilliseconds()<span class="comment">//依据国际时间来返回毫秒(0-999) </span></span><br><span class="line">getTime() <span class="comment">//返回从1970年1月1号0:0:0到现在一共花去的毫秒数 </span></span><br><span class="line">getTimezoneoffset() <span class="comment">//返回时区偏差值,即格林威治平均时间(GMT)与运行脚本的计算机所处时区设置之间相差的分钟数) </span></span><br><span class="line">parse(dateString) <span class="comment">//返回在Date字符串中自从1970年1月1日00:00:00以来的毫秒数 </span></span><br><span class="line">setYear(yearInt) <span class="comment">//设置年份.2位数或4位数 </span></span><br><span class="line">setFullYear(yearInt)<span class="comment">//设置年份.4位数 </span></span><br><span class="line">setMonth(monthInt) <span class="comment">//设置月份(0-11) </span></span><br><span class="line">setDate(dateInt) <span class="comment">//设置日(1-31) </span></span><br><span class="line">setHours(hourInt) <span class="comment">//设置小时数(0-23) </span></span><br><span class="line">setMinutes(minInt) <span class="comment">//设置分钟数(0-59) </span></span><br><span class="line">setSeconds(secInt) <span class="comment">//设置秒数(0-59) </span></span><br><span class="line">setMilliseconds(milliInt) <span class="comment">//设置毫秒(0-999) </span></span><br><span class="line">setUTCFullYear(yearInt) <span class="comment">//依据国际时间来设置年份 </span></span><br><span class="line">setUTCMonth(monthInt) <span class="comment">//依据国际时间来设置月(0-11) </span></span><br><span class="line">setUTCDate(dateInt) <span class="comment">//依据国际时间来设置日(1-31) </span></span><br><span class="line">setUTCHours(hourInt) <span class="comment">//依据国际时间来设置小时 </span></span><br><span class="line">setUTCMinutes(minInt) <span class="comment">//依据国际时间来设置分钟 </span></span><br><span class="line">setUTCSeconds(secInt) <span class="comment">//依据国际时间来设置秒 </span></span><br><span class="line">setUTCMilliseconds(milliInt) <span class="comment">//依据国际时间来设置毫秒 </span></span><br><span class="line">setTime(timeInt) <span class="comment">//设置从1970年1月1日开始的时间.毫秒数 </span></span><br><span class="line">toGMTString() <span class="comment">//根据格林威治时间将Date对象的日期(一个数值)转变成一个GMT时间字符串,如:Weds,15 June l997 14:02:02 GMT </span></span><br><span class="line">toUTCString() <span class="comment">//根据通用时间将一个Date对象的日期转换为一个字符串 </span></span><br><span class="line">toLocaleString() <span class="comment">//把Date对象的日期(一个数值)转变成一个字符串,使用所在计算机上配置使用的特定日期格式 </span></span><br><span class="line">toSource() <span class="comment">//显示对象的源代码 </span></span><br><span class="line">toString() <span class="comment">//将日期对象转换为字符串 </span></span><br><span class="line">UTC(yyyy, mm, dd, hh, mm, ss, msec) <span class="comment">//返回从格林威治标准时间到指定时间的差距,单位为毫秒 </span></span><br><span class="line">valueOf() <span class="comment">//返回日期对象的原始值</span></span><br></pre></td></tr></table></figure><h1 id="五、Math对象"><a href="#五、Math对象" class="headerlink" title="五、Math对象"></a>五、Math对象</h1><h2 id="属性-1"><a href="#属性-1" class="headerlink" title="属性:"></a>属性:</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>      //所建立对象的函数参考</span><br><span class="line">prototype       //能够为对象加入的属性和方法</span><br><span class="line"></span><br><span class="line">E          //欧拉常量,自然对数的底(约等于2.718)</span><br><span class="line">LN2         //2的自然对数(约等于0.693)</span><br><span class="line">LN10         //10的自然对数(约等于2.302)</span><br><span class="line">LOG2E         //以2为底的e的对数.(约等于1.442)</span><br><span class="line">LOG10E         //以10为底的e的对数(约等于0.434)</span><br><span class="line">PI         // ∏的值(约等于3.14159)</span><br><span class="line">SQRT1_2        //1/2(0.5)的平方根(即l除以2的平方根,约等于o.707)</span><br><span class="line">SQRT2         //2的平方根(约等于1.414)</span><br></pre></td></tr></table></figure><h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法:"></a>方法:</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">abs(x)     <span class="comment">//返回数字的绝对值</span></span><br><span class="line">acos(x)   <span class="comment">//返回数字的反余弦值</span></span><br><span class="line">asin(x)   <span class="comment">//返回数字的反正弦值</span></span><br><span class="line">atan(x)   <span class="comment">//返回位于-PI/2 和 PI/2 的反正切值</span></span><br><span class="line">atan2(y,x) <span class="comment">//返回（x,y）位于 -PI 到 PI 之间的角度</span></span><br><span class="line">ceil(x)    <span class="comment">//ceil() 方法执行的是向上取整计算，它返回的是大于或等于x，并且与之最接近的整数。与floor是一对相反的函数</span></span><br><span class="line">cos(x)    <span class="comment">//返回一个数字的余弦值</span></span><br><span class="line">exp(x)    <span class="comment">//返回 E^x 值</span></span><br><span class="line">floor(x)   <span class="comment">//floor() 方法执行的是向下取整计算，它返回的是小于或等于x，并且与之最接近的整数。</span></span><br><span class="line"></span><br><span class="line">log(x)    <span class="comment">//返回底数为E的自然对数</span></span><br><span class="line">max(x,y)    <span class="comment">//返回 x 和 y 之间较大的数</span></span><br><span class="line">min(x,y)  <span class="comment">// 返回 x 和 y 之间较小的数</span></span><br><span class="line">pow(x,y)    <span class="comment">// y^x , 返回 x 的 y 次幂的值</span></span><br><span class="line">random()   <span class="comment">//返回位于 0 到 1 之间的随机函数</span></span><br><span class="line">round(x)    <span class="comment">//四舍五入后取整</span></span><br><span class="line">sin(x)    <span class="comment">//返回数字的正弦值</span></span><br><span class="line">sqrt(x)   <span class="comment">//返回数字的平方根</span></span><br><span class="line">tan(x)    <span class="comment">//返回一个角度的正切值</span></span><br><span class="line">toSource() <span class="comment">//显示对象的源代码</span></span><br><span class="line">valueOf() <span class="comment">//返回数学对象的原始值</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、String对象&quot;&gt;&lt;a href=&quot;#一、String对象&quot; class=&quot;headerlink&quot; title=&quot;一、String对象&quot;&gt;&lt;/a&gt;一、String对象&lt;/h1&gt;&lt;h2 id=&quot;字符串的生成转换&quot;&gt;&lt;a href=&quot;#字符串的生成转换&quot; cla
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://junyizzz.github.io/categories/JavaScript/"/>
    
    
      <category term="Object" scheme="https://junyizzz.github.io/tags/Object/"/>
    
  </entry>
  
  <entry>
    <title>ES6入门</title>
    <link href="https://junyizzz.github.io/ES6/"/>
    <id>https://junyizzz.github.io/ES6/</id>
    <published>2018-11-29T02:05:45.000Z</published>
    <updated>2018-11-29T02:26:01.772Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="JavaScript" scheme="https://junyizzz.github.io/categories/JavaScript/"/>
    
    
      <category term="ES6" scheme="https://junyizzz.github.io/tags/ES6/"/>
    
      <category term="JavaScript" scheme="https://junyizzz.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
