<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JunYiZzz</title>
  
  <subtitle>Stay Hungry, Stay Foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://junyizzz.github.io/"/>
  <updated>2019-01-04T07:27:24.196Z</updated>
  <id>https://junyizzz.github.io/</id>
  
  <author>
    <name>JunYiZzz</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue 组件</title>
    <link href="https://junyizzz.github.io/vue-%E7%BB%84%E4%BB%B6/"/>
    <id>https://junyizzz.github.io/vue-组件/</id>
    <published>2019-01-04T07:25:07.000Z</published>
    <updated>2019-01-04T07:27:24.196Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="vue" scheme="https://junyizzz.github.io/categories/vue/"/>
    
      <category term="component" scheme="https://junyizzz.github.io/categories/vue/component/"/>
    
    
      <category term="vue" scheme="https://junyizzz.github.io/tags/vue/"/>
    
      <category term="component" scheme="https://junyizzz.github.io/tags/component/"/>
    
  </entry>
  
  <entry>
    <title>mock.js语法与easy-mock</title>
    <link href="https://junyizzz.github.io/mock-js/"/>
    <id>https://junyizzz.github.io/mock-js/</id>
    <published>2018-12-14T08:36:48.000Z</published>
    <updated>2018-12-14T08:38:40.199Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="mock" scheme="https://junyizzz.github.io/categories/mock/"/>
    
    
      <category term="mock" scheme="https://junyizzz.github.io/tags/mock/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法-typora版</title>
    <link href="https://junyizzz.github.io/MarkdownGrammar/"/>
    <id>https://junyizzz.github.io/MarkdownGrammar/</id>
    <published>2018-12-03T06:51:54.000Z</published>
    <updated>2018-12-03T07:45:30.018Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Reference：<a href="https://blog.csdn.net/tzs_1041218129/article/details/54728799" target="_blank" rel="noopener">https://blog.csdn.net/tzs_1041218129/article/details/54728799</a></p></blockquote><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h3 id="数学表达式"><a href="#数学表达式" class="headerlink" title="数学表达式"></a>数学表达式</h3><p>要启用这个功能，首先到 <code>Preference</code> -&gt; <code>Editor</code> 中启用。然后使用 <code>$</code> 符号包裹 Tex 命令，例如： <code>$lim_{x \to \infty} \ exp(-x)=0$</code> 将产生如下的数学表达式：</p><p><img src="https://img-blog.csdn.net/20170125095841413?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHpzXzEwNDEyMTgxMjk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h3><p>下标使用 <code>~</code> 包裹，例如：<code>H~2~O</code> 将产生水的分子式。</p><h3 id="上标"><a href="#上标" class="headerlink" title="上标"></a>上标</h3><p>上标使用 <code>^</code> 包裹，例如：<code>y^2^=4</code> 将产生表达式</p><p><img src="https://img-blog.csdn.net/20170125100105796?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHpzXzEwNDEyMTgxMjk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="插入表情"><a href="#插入表情" class="headerlink" title="插入表情"></a>插入表情</h3><p>使用 <code>:happy:</code> 输入高兴的表情，使用 <code>:sad:</code> 输入悲伤的表情，使用 <code>:cry:</code> 输入哭的表情等。以此类推！</p><p><img src="https://img-blog.csdn.net/20170125100211070?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHpzXzEwNDEyMTgxMjk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>用HTML的语法 <code>&lt;u&gt;Underline&lt;/u&gt;</code> 将产生下划线 <u>Underline</u>.</p><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>GFM添加了删除文本的语法，这是标准的Markdown语法木有的。使用 <code>~~</code> 包裹的文本将会具有删除的样式，例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~删除文本~~  1</span><br></pre></td></tr></table></figure><p>将产生</p><blockquote><p><del>删除文本</del></p></blockquote><p>的样式。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>使用  `包裹的的内容将会以代码样式显示，例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用`hello`</span><br></pre></td></tr></table></figure></p><p>将会产生 hello 的样式。</p><p>输入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```js</span><br><span class="line">public Class HelloWorld&#123;</span><br><span class="line">  System.out.println(&quot;Hello World!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>使用两个 <code>*</code> 号或者两个 <code>_</code> 包裹的内容将会被强调。例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**使用两个*号强调内容**</span><br><span class="line">__使用两个下划线强调内容__</span><br></pre></td></tr></table></figure><p> <strong>使用两个*号强调内容</strong><br> <strong>使用两个下划线强调内容</strong></p><p>Typroa 推荐使用两个*号。</p><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><p>在标准的Markdown语法中，*和_包裹的内容会是斜体显示，但是GFM下划线一般用来分隔人名和代码变量名，因此我们推荐是用星号来包裹斜体内容。如果要显示星号，则使用转义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\*</span><br></pre></td></tr></table></figure><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p>我们可以通过拖拉的方式，将本地文件夹中的图片或者网络上的图片插入。</p><h3 id="插入URL连接"><a href="#插入URL连接" class="headerlink" title="插入URL连接"></a>插入URL连接</h3><p>使用尖括号包裹的url将产生一个连接，例如：<code>&lt;www.baidu.com&gt;</code> 将产生连接: <a href="https://blog.csdn.net/tzs_1041218129/article/details/www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> .</p><p>如果是标准的url，则会自动产生连接。</p><h3 id="目录列表Table-of-Contents（TOC）"><a href="#目录列表Table-of-Contents（TOC）" class="headerlink" title="目录列表Table of Contents（TOC）"></a>目录列表Table of Contents（TOC）</h3><p>输入 <code>[toc]</code> 然后回车，将会产生一个目录，这个目录抽取了文章的所有标题，自动更新内容。</p><h3 id="水平分割线"><a href="#水平分割线" class="headerlink" title="水平分割线"></a>水平分割线</h3><p>使用 <code>***</code> 或者 <code>---</code>，然后回车，来产生水平分割线。</p><hr><h3 id="标注"><a href="#标注" class="headerlink" title="标注"></a>标注</h3><p>我们可以对某一个词语进行标注。例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">某些人用过了才知道[^注释]</span><br><span class="line">[^注释]:Somebody that I used to know.</span><br></pre></td></tr></table></figure><p>将产生：</p><p><img src="https://img-blog.csdn.net/20170125102940413?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHpzXzEwNDEyMTgxMjk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>把鼠标放在 <code>注释</code> 上，将会有提示内容。</p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">|姓名|性别|毕业学校|工资|</span><br><span class="line">|:---|:---:|:---:|---:|</span><br><span class="line">|杨洋|男|重庆交通大学|3200|</span><br><span class="line">|峰哥|男|贵州大学|5000|</span><br><span class="line">|坑货|女|北京大学|2000|</span><br><span class="line">123456</span><br></pre></td></tr></table></figure><p>将产生:</p><p><img src="https://img-blog.csdn.net/20170125103221823?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHpzXzEwNDEyMTgxMjk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h2 id="数学表达式块"><a href="#数学表达式块" class="headerlink" title="数学表达式块"></a>数学表达式块</h2><p>输入两个美元符号，然后回车，就可以输入数学表达式块了。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$\mathbf&#123;V&#125;_1 \times \mathbf&#123;V&#125;_2 =  \begin&#123;vmatrix&#125; \mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\\end&#123;vmatrix&#125;$$</span><br></pre></td></tr></table></figure><p> 将会产生:</p><p>$$\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix} \mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \\end{vmatrix}$$</p><h3 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h3><p>使用如下的代码创建任务列表，在 <code>[]</code> 中输入 <code>x</code> 表示完成，也可以通过点击选择完成或者没完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- [ ] 吃饭</span><br><span class="line">- [ ] 逛街</span><br><span class="line">- [ ] 看电影</span><br><span class="line">- [X] 吃零食1234</span><br></pre></td></tr></table></figure><p>将产生如下样式：</p><ul><li style="list-style: none"><input type="checkbox"> 吃饭</li><li style="list-style: none"><input type="checkbox"> 逛街</li><li style="list-style: none"><input type="checkbox"> 看电影</li><li>[X] 吃零食1234</li></ul><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>输入 +, -, *, 创建无序的列表，使用任意数字开头，创建有序列表，例如：</p><p><strong>无序的列表</strong></p><ul><li>hehe</li><li>haha</li><li>xixi<br><strong>有序的列表</strong></li></ul><ol><li>苹果</li><li>香蕉</li><li>我都喜欢</li></ol><h2 id="块引用"><a href="#块引用" class="headerlink" title="块引用"></a>块引用</h2><p>   使用 <code>&gt;</code> 来插入块引用。例如：</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是一个块引用！</span><br></pre></td></tr></table></figure><p>   将产生如下样式：</p><blockquote><p>这是一个块引用！</p></blockquote><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>使用#表示一级标题，##表示二级标题，以此类推，有6个标题</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Reference：&lt;a href=&quot;https://blog.csdn.net/tzs_1041218129/article/details/54728799&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blo
      
    
    </summary>
    
      <category term="markdown" scheme="https://junyizzz.github.io/categories/markdown/"/>
    
    
      <category term="markdown" scheme="https://junyizzz.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>iview源码解析</title>
    <link href="https://junyizzz.github.io/iviewSourceCode/"/>
    <id>https://junyizzz.github.io/iviewSourceCode/</id>
    <published>2018-11-29T09:40:44.000Z</published>
    <updated>2018-12-03T05:46:33.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iview源码解析"><a href="#iview源码解析" class="headerlink" title="iview源码解析"></a>iview源码解析</h1><p>对iview源码项目的结构和组件进行解析，仅个人学习过程中的记录和理解，不对之处还请不吝赐教</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>version：3.1.5</p><p>地址：<a href="https://github.com/iview/iview" target="_blank" rel="noopener">https://github.com/iview/iview</a></p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><a href="https://imgchr.com/i/Fmpc6g" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/30/Fmpc6g.png" alt="Fmpc6g.png"></a></p><p>├─assets     图片存放目录<br>├─build   Webpack配置存放目录<br>├─dist        打包之后页面存放目录<br>├─examples       组件的demo页面存放目录<br>├─node_modules         项目依赖目录<br>├─src                组件根目录<br>│  │  index.js            组件入口<br>│  ├─components       组件存放目录<br>│  ├─directives            组件封装的指令存放目录<br>│  ├─locale       组件封装的语言配置存放目录<br>│  ├─mixins        组件封装的混入存放目录<br>│  ├─styles        组件的样式根目录<br>│  │  │  copyright.less<br>│  │  │  custom.less  样式公共变量<br>│  │  │  index.less  样式入口<br>│  │  │  README.md<br>│  │  │<br>│  │  ├─animation  动画样式<br>│  │  │<br>│  │  ├─color<br>│  │  │<br>│  │  ├─common  公共样式<br>│  │  │<br>│  │  ├─components  组件样式<br>│  │  │<br>│  │  └─mixins  混入样式<br>│  │<br>│  └─utils  组件内部公共方法<br>├─test     测试文件<br>└─types  typeScript文件</p><h2 id="组件目录"><a href="#组件目录" class="headerlink" title="组件目录"></a>组件目录</h2><p><img src="https://s1.ax1x.com/2018/11/30/FmCEMF.png" alt="FmCEMF.png"></p><h2 id="Let‘s-Start"><a href="#Let‘s-Start" class="headerlink" title="Let‘s Start"></a>Let‘s Start</h2><h3 id="index-js-入口文件"><a href="#index-js-入口文件" class="headerlink" title="index.js 入口文件"></a>index.js 入口文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//大致结构</span></span><br><span class="line"><span class="comment">//引入所有的组件</span></span><br><span class="line"><span class="keyword">import</span> ... from <span class="string">'./components/...'</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//定义包含所有组件的对象</span></span><br><span class="line"><span class="keyword">const</span> components =&#123;...&#125;; </span><br><span class="line">                   </span><br><span class="line"><span class="comment">//在非 template/render 模式下（例如使用 CDN 引用时），需要使用加前缀 i-，针对部分组件                  </span></span><br><span class="line"><span class="keyword">const</span> iview = &#123;...components,<span class="attr">iButton</span>: Button,...&#125;;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> install = <span class="function"><span class="keyword">function</span>(<span class="params">Vue, opts = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//避免组件的重复加载</span></span><br><span class="line">    <span class="keyword">if</span> (install.installed) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//配置语言</span></span><br><span class="line">    locale.use(opts.locale);</span><br><span class="line">    locale.i18n(opts.i18n);</span><br><span class="line"><span class="comment">//加载组件</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(iview).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        Vue.component(key, iview[key]);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">//全局注册IVIEW对象，size：用于组件大小，transfer：是否将弹层放置于 body 内，在 Tabs、带有 fixed 的 Table 列内使用时，建议添加此属性，它将不受父级样式影响，从而达到更好的效果</span></span><br><span class="line">    Vue.prototype.$IVIEW = &#123;</span><br><span class="line">        size: opts.size || <span class="string">''</span>,</span><br><span class="line">        transfer: <span class="string">'transfer'</span> <span class="keyword">in</span> opts ? opts.transfer : <span class="string">''</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//全局注册部分组件</span></span><br><span class="line">    Vue.prototype.$Loading = LoadingBar;</span><br><span class="line">    Vue.prototype.$Message = Message;</span><br><span class="line">    Vue.prototype.$Modal = Modal;</span><br><span class="line">    Vue.prototype.$Notice = Notice;</span><br><span class="line">    Vue.prototype.$Spin = Spin;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// auto install</span></span><br><span class="line"><span class="comment">//在浏览器环境下默认加载组件</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">window</span>.Vue) &#123;</span><br><span class="line">    install(<span class="built_in">window</span>.Vue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//组件vue.user的对象</span></span><br><span class="line"><span class="keyword">const</span> API = &#123;</span><br><span class="line">    version: process.env.VERSION, <span class="comment">// eslint-disable-line no-undef</span></span><br><span class="line">    locale: locale.use,</span><br><span class="line">    i18n: locale.i18n,</span><br><span class="line">    install,</span><br><span class="line">    Circle,</span><br><span class="line">    Switch,</span><br><span class="line">    ...components</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">API.lang = <span class="function">(<span class="params">code</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> langObject = <span class="built_in">window</span>[<span class="string">'iview/locale'</span>].default;</span><br><span class="line">    <span class="keyword">if</span> (code === langObject.i.locale) locale.use(langObject);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">console</span>.log(<span class="string">`The <span class="subst">$&#123;code&#125;</span> language pack is not loaded.`</span>); <span class="comment">// eslint-disable-line no-console</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//输出对象</span></span><br><span class="line"><span class="built_in">module</span>.exports.default = <span class="built_in">module</span>.exports = API;   <span class="comment">// eslint-disable-line no-undef</span></span><br></pre></td></tr></table></figure><p>使用方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> iView <span class="keyword">from</span> <span class="string">'../src/index'</span>;</span><br><span class="line"><span class="comment">// import locale from '../src/locale/lang/en-US';</span></span><br><span class="line"><span class="keyword">import</span> locale <span class="keyword">from</span> <span class="string">'../src/locale/lang/zh-CN'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(iView, &#123;</span><br><span class="line">    locale</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h3><h4 id="Icon-图标组件"><a href="#Icon-图标组件" class="headerlink" title="Icon 图标组件"></a>Icon 图标组件</h4><p>所有的icon的样式文件和编码定义都可以在src\styles\common\iconfont 下找到，prefix=ivu-icon-。</p><p>组件很简单，用的是原生的 i 标签，绑定了原生的click方法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">:class</span>=<span class="string">"classes"</span> <span class="attr">:style</span>=<span class="string">"styles"</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">handleClick (event) &#123;</span><br><span class="line">                <span class="keyword">this</span>.$emit(<span class="string">'click'</span>, event);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>原生事件在使用的时候要添加native修饰符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Icon @click.native=<span class="string">"handleClick"</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="Button-按钮组件"><a href="#Button-按钮组件" class="headerlink" title="Button 按钮组件"></a>Button 按钮组件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"tagName"</span> <span class="attr">:class</span>=<span class="string">"classes"</span> <span class="attr">:disabled</span>=<span class="string">"disabled"</span> @<span class="attr">click</span>=<span class="string">"handleClickLink"</span> <span class="attr">v-bind</span>=<span class="string">"tagProps"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">Icon</span> <span class="attr">class</span>=<span class="string">"ivu-load-loop"</span> <span class="attr">type</span>=<span class="string">"ios-loading"</span> <span class="attr">v-if</span>=<span class="string">"loading"</span>&gt;</span><span class="tag">&lt;/<span class="name">Icon</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">Icon</span> <span class="attr">:type</span>=<span class="string">"icon"</span> <span class="attr">:custom</span>=<span class="string">"customIcon"</span> <span class="attr">v-if</span>=<span class="string">"(icon || customIcon) &amp;&amp; !loading"</span>&gt;</span><span class="tag">&lt;/<span class="name">Icon</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"showSlot"</span> <span class="attr">ref</span>=<span class="string">"slot"</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最外层用 component 标签是用于如果用到了 to API，按钮点击跳转，则用原生的a标签包裹，否则为button标签</p><p>button的类型有下列几种，其中的oneOf方法跳转/util/assist.js文件,用于判断第一个参数是否在第二个数组参数内</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">type: &#123;</span><br><span class="line">          validator (value) &#123;</span><br><span class="line">                    <span class="keyword">return</span> oneOf(value, [<span class="string">'default'</span>, <span class="string">'primary'</span>, <span class="string">'dashed'</span>, <span class="string">'text'</span>, <span class="string">'info'</span>, <span class="string">'success'</span>, <span class="string">'warning'</span>, <span class="string">'error'</span>]);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="keyword">default</span>: <span class="string">'default'</span></span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><p>最外层的标签上绑定了handleClickLink方法，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/ Ctrl or CMD and click, open <span class="keyword">in</span> <span class="keyword">new</span> <span class="built_in">window</span> when use <span class="string">`to`</span></span><br><span class="line">            handleClickLink (event) &#123;</span><br><span class="line">                <span class="keyword">this</span>.$emit(<span class="string">'click'</span>, event);</span><br><span class="line">                <span class="keyword">const</span> openInNewWindow = event.ctrlKey || event.metaKey;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.handleCheckClick(event, openInNewWindow);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>如果用到to跳转，即最外层是a标签时，使用ctrl和cmd的同时点击跳转，则打开新窗口跳转，handleCheckClick方法通过mixins引入，见/mixin/link,是一个封装的打开新窗口的方法</p><h5 id="ButtonGroup-按钮组合"><a href="#ButtonGroup-按钮组合" class="headerlink" title="ButtonGroup 按钮组合"></a>ButtonGroup 按钮组合</h5><p>通过设置动态的class来实现按钮组合的效果</p><h4 id="Grid-栅格组件"><a href="#Grid-栅格组件" class="headerlink" title="Grid 栅格组件"></a>Grid 栅格组件</h4><p>组件内分为行组件row.vue和列组件col.vue，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"classes"</span> <span class="attr">:style</span>=<span class="string">"styles"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>两个组件都类似，使用到了插槽方法，大部分的功能也是用样式实现，这边主要介绍组件中使用的几个方法，/utils/assist中的findComponentUpward，findComponentDownward，findBrothersComponents，从名称也可以看出来，功能是找寻父组件，子组件，兄弟组件。</p><h4 id="Layout-布局组件"><a href="#Layout-布局组件" class="headerlink" title="Layout 布局组件"></a>Layout 布局组件</h4><ul><li><code>Layout</code>：布局容器，其下可嵌套 <code>Header`</code>Sider<code>Content</code>Footer<code>或</code>Layout` 本身，可以放在任何父容器中。</li><li><code>Header</code>：顶部布局，自带默认样式，其下可嵌套任何元素，只能放在 <code>Layout</code> 中。</li><li><code>Sider</code>：侧边栏，自带默认样式及基本功能，其下可嵌套任何元素，只能放在 <code>Layout</code> 中。</li><li><code>Content</code>：内容部分，自带默认样式，其下可嵌套任何元素，只能放在 <code>Layout</code> 中。</li><li><code>Footer</code>：底部布局，自带默认样式，其下可嵌套任何元素，只能放在 <code>Layout</code> 中。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"wrapClasses"</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>都是使用slot插槽的方法实现，layout.vue中有findSider方法，查询是否有侧边栏，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">findSider () &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.$children.some(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> child.$options.name === <span class="string">'Sider'</span>; </span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>some 方法判断是否存在，$children找到子组件</p><h4 id="Card-卡片组件"><a href="#Card-卡片组件" class="headerlink" title="Card 卡片组件"></a>Card 卡片组件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"classes"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"headClasses"</span> <span class="attr">v-if</span>=<span class="string">"showHead"</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Icon</span> <span class="attr">v-if</span>=<span class="string">"icon"</span> <span class="attr">:type</span>=<span class="string">"icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">Icon</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"extraClasses"</span> <span class="attr">v-if</span>=<span class="string">"showExtra"</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"extra"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"bodyClasses"</span> <span class="attr">:style</span>=<span class="string">"bodyStyles"</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总共有3个插槽，自定义标题、额外操作、主题内容，可以完全自由控制各个部分</p><h4 id="Collapse-折叠面板"><a href="#Collapse-折叠面板" class="headerlink" title="Collapse 折叠面板"></a>Collapse 折叠面板</h4><p>分为单个的面板组件panel.vue和一个放置面板的容器collapse.vue。</p><p>面板组件的主题内容也是通过插槽插入，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">collapse-transition</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"contentClasses"</span> <span class="attr">v-show</span>=<span class="string">"isActive"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"boxClasses"</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collapse-transition</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CollapseTransition是面板打开关闭的transition动画，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">toggle () &#123;</span><br><span class="line">                <span class="keyword">this</span>.$parent.toggle(&#123;</span><br><span class="line">                    name: <span class="keyword">this</span>.name || <span class="keyword">this</span>.index,</span><br><span class="line">                    isActive: <span class="keyword">this</span>.isActive</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>面板组件里点击title触发父元素的toggle方法，name参数 为操作的面板名称，isActive为开启还是关闭。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">toggle (data) &#123;</span><br><span class="line">                <span class="keyword">const</span> name = data.name.toString();</span><br><span class="line">                <span class="keyword">let</span> newActiveKey = [];<span class="comment">//开启的面板</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.accordion) &#123;<span class="comment">//手风琴模式</span></span><br><span class="line">                    <span class="keyword">if</span> (!data.isActive) &#123;</span><br><span class="line">                        newActiveKey.push(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> activeKey = <span class="keyword">this</span>.getActiveKey();</span><br><span class="line">                    <span class="keyword">const</span> nameIndex = activeKey.indexOf(name);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (data.isActive) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (nameIndex &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">                            activeKey.splice(nameIndex, <span class="number">1</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (nameIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                            activeKey.push(name);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    newActiveKey = activeKey;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.currentValue = newActiveKey;</span><br><span class="line">                <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, newActiveKey);</span><br><span class="line">                <span class="keyword">this</span>.$emit(<span class="string">'on-change'</span>, newActiveKey);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>父元素的toggle方法，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;iview源码解析&quot;&gt;&lt;a href=&quot;#iview源码解析&quot; class=&quot;headerlink&quot; title=&quot;iview源码解析&quot;&gt;&lt;/a&gt;iview源码解析&lt;/h1&gt;&lt;p&gt;对iview源码项目的结构和组件进行解析，仅个人学习过程中的记录和理解，不对之处还请
      
    
    </summary>
    
      <category term="iview" scheme="https://junyizzz.github.io/categories/iview/"/>
    
    
      <category term="iview" scheme="https://junyizzz.github.io/tags/iview/"/>
    
  </entry>
  
  <entry>
    <title>Emmet使用方法简介</title>
    <link href="https://junyizzz.github.io/Emmet/"/>
    <id>https://junyizzz.github.io/Emmet/</id>
    <published>2018-11-29T03:23:48.000Z</published>
    <updated>2018-11-29T03:29:20.242Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Emmet"><a href="#Emmet" class="headerlink" title="Emmet"></a>Emmet</h1><blockquote><p>Reference: <a href="https://blog.csdn.net/qq_41115965/article/details/82054857" target="_blank" rel="noopener">https://blog.csdn.net/qq_41115965/article/details/82054857</a> </p></blockquote><p><strong>*&gt;*</strong>  表示父子关系</p><p><strong>*+*</strong>  表示兄弟关系</p><p><strong>***</strong>  表示重复</p><p><strong>*^*</strong>  表示向上提升一个级别</p><p><strong>*()*</strong>  表示逻辑关系，是等级更清晰</p><p><strong>*#*</strong>  表示id属性</p><p><strong>*.*</strong>  表示class属性</p><p><strong>*[]*</strong>  表示自定义属性</p><p><strong>*$*</strong>  表示数字1-n，n 为 * 号后面的数字</p><p><strong>*{}*</strong>  表示文本内容</p><p><strong>*lorem*</strong> + n  表示生成n个无意义的单词 </p><h2 id="实例1："><a href="#实例1：" class="headerlink" title="实例1："></a>实例1：</h2><h3 id="div-container-gt-ul-content-gt-li-content-item-3-Tab-gt"><a href="#div-container-gt-ul-content-gt-li-content-item-3-Tab-gt" class="headerlink" title="div.container&gt;ul.content&gt;li.content-item*3 + Tab =&gt;"></a>div.container&gt;ul.content&gt;li.content-item*3 + Tab =&gt;</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line">    &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"content"</span>&gt;</span><br><span class="line">        &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"content-item"</span>&gt;<span class="number">123</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li class="content-item"&gt;456&lt;/</span>li&gt;</span><br><span class="line">        &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"content-item"</span>&gt;<span class="number">789</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h2 id="实例2："><a href="#实例2：" class="headerlink" title="实例2："></a>实例2：</h2><h3 id="div-left-gt-img-div-right-Tab-gt"><a href="#div-left-gt-img-div-right-Tab-gt" class="headerlink" title="div.left&gt;img^div.right + Tab =&gt;"></a>div.left&gt;img^div.right + Tab =&gt;</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"left"</span>&gt;</span><br><span class="line">    &lt;img src=<span class="string">""</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div class="right"&gt;&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><h2 id="实例3："><a href="#实例3：" class="headerlink" title="实例3："></a>实例3：</h2><h3 id="div-container-container-data-value-Tab-gt"><a href="#div-container-container-data-value-Tab-gt" class="headerlink" title="div.container#container[data-value] + Tab =&gt;"></a>div.container#container[data-value] + Tab =&gt;</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span> id=<span class="string">"container"</span> data-value=<span class="string">""</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="实例4："><a href="#实例4：" class="headerlink" title="实例4："></a>实例4：</h2><h3 id="ul-items-gt-li-item-5-Tab-gt"><a href="#ul-items-gt-li-item-5-Tab-gt" class="headerlink" title="ul.items&gt;li.item$*5 + Tab =&gt;"></a>ul.items&gt;li.item$*5 + Tab =&gt;</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"items"</span>&gt;</span><br><span class="line">    &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item1"</span>&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item2"</span>&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item3"</span>&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item4"</span>&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"item5"</span>&gt;&lt;/li&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br></pre></td></tr></table></figure><h2 id="实例5："><a href="#实例5：" class="headerlink" title="实例5："></a>实例5：</h2><h3 id="a-href-www-baidu-com-百度一下-Tab-gt"><a href="#a-href-www-baidu-com-百度一下-Tab-gt" class="headerlink" title="a[href=www.baidu.com]{百度一下} + Tab =&gt;"></a>a[href=<a href="http://www.baidu.com]{百度一下}" target="_blank" rel="noopener">www.baidu.com]{百度一下}</a> + Tab =&gt;</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"www.baidu.com"</span>&gt;百度一下&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure><h2 id="实例6："><a href="#实例6：" class="headerlink" title="实例6："></a>实例6：</h2><h3 id="lorem10-Tab-gt"><a href="#lorem10-Tab-gt" class="headerlink" title="lorem10 + Tab =&gt;"></a>lorem10 + Tab =&gt;</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Sunt, voluptatum.</span><br></pre></td></tr></table></figure><h1 id="css文件"><a href="#css文件" class="headerlink" title="css文件"></a>css文件</h1><h2 id="实例1：-1"><a href="#实例1：-1" class="headerlink" title="实例1："></a>实例1：</h2><h3 id="w10-Tab，H10-Tab，m10-20-Tab，df-Tab，bdrs10-Tab-gt"><a href="#w10-Tab，H10-Tab，m10-20-Tab，df-Tab，bdrs10-Tab-gt" class="headerlink" title="w10 + Tab，H10 + Tab，m10-20 + Tab，df  + Tab，bdrs10 + Tab =&gt;"></a>w10 + Tab，H10 + Tab，m10-20 + Tab，df  + Tab，bdrs10 + Tab =&gt;</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">-webkit-border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">-moz-border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Emmet&quot;&gt;&lt;a href=&quot;#Emmet&quot; class=&quot;headerlink&quot; title=&quot;Emmet&quot;&gt;&lt;/a&gt;Emmet&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Reference: &lt;a href=&quot;https://blog.csdn.net/qq_
      
    
    </summary>
    
      <category term="Emmet" scheme="https://junyizzz.github.io/categories/Emmet/"/>
    
    
      <category term="Emmet" scheme="https://junyizzz.github.io/tags/Emmet/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://junyizzz.github.io/Regexp/"/>
    <id>https://junyizzz.github.io/Regexp/</id>
    <published>2018-11-29T03:21:03.000Z</published>
    <updated>2018-11-29T03:23:09.632Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正则法则"><a href="#正则法则" class="headerlink" title="正则法则"></a><strong>正则法则</strong></h2><p>正则表达式 = /pattern/flags 其中flags中g表示匹配全部，i表示不区分大小写，m表示匹配多行。  pattern包含 ([{\^$|)?*+.]}元字符，若匹配的字符串中包含元字符，使用\转义。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> patter1 = <span class="regexp">/(.)u/gi</span>;                 <span class="comment">//正则表达式，标志没有，可为空，也可以使用var patter1 = new RegExp("pattern","flags")，使用new是创建对象</span></span><br><span class="line"><span class="keyword">if</span>(patter1.test(name))&#123;                 <span class="comment">//test查找符合要求的子串是否存在,返回true</span></span><br><span class="line">    <span class="built_in">RegExp</span>.input;               <span class="comment">//原始字符串</span></span><br><span class="line">    <span class="built_in">RegExp</span>.leftContext;         <span class="comment">//捕捉到的位置的左边字符串</span></span><br><span class="line">    <span class="built_in">RegExp</span>.rightContext;        <span class="comment">//捕捉到的位置的右边字符串</span></span><br><span class="line">    <span class="built_in">RegExp</span>.lastMatch;           <span class="comment">//返回最近一次与整个正则表达式匹配的字符串 mu</span></span><br><span class="line">    <span class="built_in">RegExp</span>.lastParen;           <span class="comment">//返回最近一次捕捉的字符</span></span><br><span class="line">    patter1.global;             <span class="comment">//返回正则是否包含全局标志g</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> matches = patter1.exec(name);       <span class="comment">//查找符合要求的子串。matches.index表示查找到的起始下标，matches.input表示输入字符串。patter1.lastIndex表示查找到的结束下标，matches[0]表示查找到的第一个匹配项，若匹配项为全局模式，则每次调用返回下一个匹配项。12345678910</span></span><br></pre></td></tr></table></figure><h2 id="正则表达式字符"><a href="#正则表达式字符" class="headerlink" title="正则表达式字符"></a>正则表达式字符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">\ 做为转义，即通常在&quot;\&quot;后面的字符不按原来意义解释，如/b/匹配字符&quot;b&quot;，当b前面加了反斜杆后/\b/，转意为匹配一个单词的边界。 </span><br><span class="line">-或- </span><br><span class="line">对正则表达式功能字符的还原，如&quot;*&quot;匹配它前面元字符0次或多次，/a*/将匹配a,aa,aaa，加了&quot;\&quot;后，/a\*/将只匹配&quot;a*&quot;。 </span><br><span class="line"></span><br><span class="line">^ 匹配一个输入或一行的开头，/^a/匹配&quot;an A&quot;，而不匹配&quot;An a&quot; </span><br><span class="line">$ 匹配一个输入或一行的结尾，/a$/匹配&quot;An a&quot;，而不匹配&quot;an A&quot; </span><br><span class="line">* 匹配前面元字符0次或多次，/ba*/将匹配b,ba,baa,baaa </span><br><span class="line">+ 匹配前面元字符1次或多次，/ba+/将匹配ba,baa,baaa </span><br><span class="line">? 匹配前面元字符0次或1次，/ba?/将匹配b,ba </span><br><span class="line">(x) 匹配x保存x在名为$1...$9的变量中 </span><br><span class="line">x|y 匹配x或y </span><br><span class="line">&#123;n&#125; 精确匹配n次 </span><br><span class="line">&#123;n,&#125; 匹配n次以上 </span><br><span class="line">&#123;n,m&#125; 匹配n-m次 </span><br><span class="line">[xyz] 字符集(character set)，匹配这个集合中的任一一个字符(或元字符) </span><br><span class="line">[^xyz] 不匹配这个集合中的任何一个字符 </span><br><span class="line">[\b] 匹配一个退格符 </span><br><span class="line">\b 匹配一个单词的边界 </span><br><span class="line">\B 匹配一个单词的非边界 </span><br><span class="line">\cX 这儿，X是一个控制符，/\cM/匹配Ctrl-M </span><br><span class="line">\d 匹配一个字数字符，/\d/ = /[0-9]/ </span><br><span class="line">\D 匹配一个非字数字符，/\D/ = /[^0-9]/ </span><br><span class="line">\n 匹配一个换行符 </span><br><span class="line">\r 匹配一个回车符 </span><br><span class="line">\s 匹配一个空白字符，包括\n,\r,\f,\t,\v等 </span><br><span class="line">\S 匹配一个非空白字符，等于/[^\n\f\r\t\v]/ </span><br><span class="line">\t 匹配一个制表符 </span><br><span class="line">\v 匹配一个重直制表符 </span><br><span class="line">\w 匹配一个可以组成单词的字符(alphanumeric，这是我的意译，含数字)，包括下划线，如[\w]匹配&quot;$5.98&quot;中的5，等于[a-zA-Z0-9] </span><br><span class="line">\W 匹配一个不可以组成单词的字符，如[\W]匹配&quot;$5.98&quot;中的$，等于[^a-zA-Z0-9]。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;正则法则&quot;&gt;&lt;a href=&quot;#正则法则&quot; class=&quot;headerlink&quot; title=&quot;正则法则&quot;&gt;&lt;/a&gt;&lt;strong&gt;正则法则&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;正则表达式 = /pattern/flags 其中flags中g表示匹配全部，i表示不区分
      
    
    </summary>
    
      <category term="regexp" scheme="https://junyizzz.github.io/categories/regexp/"/>
    
    
      <category term="regexp" scheme="https://junyizzz.github.io/tags/regexp/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript数组操作</title>
    <link href="https://junyizzz.github.io/ArrayOperation/"/>
    <id>https://junyizzz.github.io/ArrayOperation/</id>
    <published>2018-11-29T03:05:24.000Z</published>
    <updated>2018-11-29T03:07:27.325Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h1><h2 id="js变量类型"><a href="#js变量类型" class="headerlink" title="js变量类型"></a>js变量类型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"student"</span>,age=<span class="number">12</span>;            <span class="comment">//underfined、null、boolean、string、number为基本数值类型。逗号一并定义初始化多个变量。基本包装类型String、Boolean、Number通过valueOf()可以获取基本数值类型，可以实现自动装箱和拆箱操作。</span></span><br></pre></td></tr></table></figure><h2 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names=[];                           <span class="comment">//定义数组并初始化为空</span></span><br><span class="line">names = [<span class="string">"小明"</span>,<span class="string">"小红"</span>,<span class="string">"小刚"</span>];           <span class="comment">//赋值，可以在定义时赋值</span></span><br><span class="line">names = <span class="keyword">new</span> <span class="built_in">Array</span>();                    <span class="comment">//定义数组并初始化为空</span></span><br><span class="line">names=<span class="keyword">new</span> <span class="built_in">Array</span>(names.length);          <span class="comment">//数组基类为Array，属性length为数组长度</span></span><br><span class="line">names = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'小明'</span>,<span class="string">'小红'</span>,<span class="string">'小刚'</span>);  <span class="comment">//字符串不区分单双引号，只要配对使用就行</span></span><br></pre></td></tr></table></figure><h2 id="增删查改"><a href="#增删查改" class="headerlink" title="增删查改"></a><strong>增删查改</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//元素增加</span></span><br><span class="line">names[<span class="number">4</span>]=<span class="string">"小胡"</span>;                         <span class="comment">//通过赋值，直接添加了两项，null和“小胡”</span></span><br><span class="line">names.unshift(<span class="string">"小李"</span>,<span class="string">"小兰"</span>);             <span class="comment">//首部添加</span></span><br><span class="line">names.push(<span class="string">"小李"</span>,<span class="string">"小兰"</span>);                <span class="comment">//末尾添加</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//元素删除</span></span><br><span class="line"><span class="keyword">var</span> item = names.pop();                  <span class="comment">//删除获取最后一项</span></span><br><span class="line">item=names.shift();                      <span class="comment">//删除获取第一项</span></span><br><span class="line">names.splice(<span class="number">2</span>,<span class="number">1</span>,<span class="string">"小季"</span>,<span class="string">"小明"</span>);          <span class="comment">//删除添加数据，修改源数组，第一个参数表示开始删除的位(包含),第二个参数表示要删除的数目，后面参数表示在删除位置处添加的元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//元素读取查找</span></span><br><span class="line"><span class="keyword">var</span> nameitem=names[<span class="number">2</span>];                  <span class="comment">//使用[]读取数组，这是最简单的读取方式</span></span><br><span class="line">names = names.slice(<span class="number">-4</span>,<span class="number">6</span>);              <span class="comment">//读取数组段，不修改源数组，负数表示从右向左数，-1表示末尾第一个元素，0表示首部第一个元素。只有一个参数时表示直到末尾。读取索引包含第一个参数不包含第二个参数</span></span><br><span class="line">names.indexOf(<span class="string">"小明"</span>);                    <span class="comment">//查找匹配元素的位置，没有找到返回-1，lastindexof表示最后匹配的位置。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组的拼接和字符串表示</span></span><br><span class="line">names=names.concat(<span class="string">"小王"</span>,[<span class="string">"小明"</span>,<span class="string">"小黑"</span>]); <span class="comment">//拼接数组，不修改源数组，所以要赋值</span></span><br><span class="line"><span class="keyword">var</span> str=stringnames.join(<span class="string">","</span>);            <span class="comment">//使用间隔字符串连接数组</span></span><br></pre></td></tr></table></figure><p><strong>遍历</strong> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> boolresult = names.every(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;   <span class="comment">//对数组中元素每一项进行布尔运算，返回false和true。every函数，全部元素返回true时返回true。some函数某一元素返回true时返回true</span></span><br><span class="line">    <span class="keyword">return</span> (index&gt;<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> nameresult = names.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;   <span class="comment">//返回数组，filter函数获取满足条件的项，map函数获取每一项计算值的集合，不改变原数组，forEach函数等价于for语句，对每项处理</span></span><br><span class="line">    <span class="keyword">return</span> (index&gt;<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line">nameresult = names.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,cur,index,array</span>)</span>&#123;   <span class="comment">//reduce从前向后迭代，reduceRight从后向前迭代。</span></span><br><span class="line">    <span class="keyword">return</span> prev+<span class="string">"+"</span>+cur;                                    <span class="comment">//迭代从第二项开始，prev初始值为第一项，cur初始值为第二项。计算值自动传给下一函数的prev，返回最后一次迭代产生的值</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a><strong>排序</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">names.reverse();                        <span class="comment">//数组取反</span></span><br><span class="line">names.sort();                           <span class="comment">//数组排序sort(compare)，参数可为排序函数,空元素将排到最后</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">student1,student2</span>)</span>&#123;    <span class="comment">//比较函数，返回-1,0,1</span></span><br><span class="line">    <span class="comment">//return student1.age&lt;student2.age?-1:(student1.age==student2.age?0:1);   //-1表示前对象小，1表示后对象小，0表示相等</span></span><br><span class="line">    <span class="keyword">return</span> student2.age-student1.age;  <span class="comment">//正数自动转化为1，负数转化为-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组原型"><a href="#数组原型" class="headerlink" title="数组原型"></a><strong>数组原型</strong></h2><p>自定义数组原型函数，实现为所有数组添加功能 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">array_max</span>(<span class="params"> </span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>,<span class="keyword">this</span>);    <span class="comment">//max取最大值，min取最小值。还有很多数学运算</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Array</span>.prototype.max = array_max;         <span class="comment">//重写数组原型链</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);     <span class="comment">//应用自定义原型函数</span></span><br><span class="line"><span class="keyword">var</span> y = x.max( );</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数组操作&quot;&gt;&lt;a href=&quot;#数组操作&quot; class=&quot;headerlink&quot; title=&quot;数组操作&quot;&gt;&lt;/a&gt;数组操作&lt;/h1&gt;&lt;h2 id=&quot;js变量类型&quot;&gt;&lt;a href=&quot;#js变量类型&quot; class=&quot;headerlink&quot; title=&quot;js变量类
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://junyizzz.github.io/categories/JavaScript/"/>
    
    
      <category term="Array" scheme="https://junyizzz.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript数组操作</title>
    <link href="https://junyizzz.github.io/Array-Operation/"/>
    <id>https://junyizzz.github.io/Array-Operation/</id>
    <published>2018-11-29T03:05:24.000Z</published>
    <updated>2018-11-29T06:12:19.150Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h1><h2 id="js变量类型"><a href="#js变量类型" class="headerlink" title="js变量类型"></a>js变量类型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"student"</span>,age=<span class="number">12</span>;            <span class="comment">//underfined、null、boolean、string、number为基本数值类型。逗号一并定义初始化多个变量。基本包装类型String、Boolean、Number通过valueOf()可以获取基本数值类型，可以实现自动装箱和拆箱操作。</span></span><br></pre></td></tr></table></figure><h2 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names=[];                           <span class="comment">//定义数组并初始化为空</span></span><br><span class="line">names = [<span class="string">"小明"</span>,<span class="string">"小红"</span>,<span class="string">"小刚"</span>];           <span class="comment">//赋值，可以在定义时赋值</span></span><br><span class="line">names = <span class="keyword">new</span> <span class="built_in">Array</span>();                    <span class="comment">//定义数组并初始化为空</span></span><br><span class="line">names=<span class="keyword">new</span> <span class="built_in">Array</span>(names.length);          <span class="comment">//数组基类为Array，属性length为数组长度</span></span><br><span class="line">names = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'小明'</span>,<span class="string">'小红'</span>,<span class="string">'小刚'</span>);  <span class="comment">//字符串不区分单双引号，只要配对使用就行</span></span><br></pre></td></tr></table></figure><h2 id="增删查改"><a href="#增删查改" class="headerlink" title="增删查改"></a><strong>增删查改</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//元素增加</span></span><br><span class="line">names[<span class="number">4</span>]=<span class="string">"小胡"</span>;                         <span class="comment">//通过赋值，直接添加了两项，null和“小胡”</span></span><br><span class="line">names.unshift(<span class="string">"小李"</span>,<span class="string">"小兰"</span>);             <span class="comment">//首部添加</span></span><br><span class="line">names.push(<span class="string">"小李"</span>,<span class="string">"小兰"</span>);                <span class="comment">//末尾添加</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//元素删除</span></span><br><span class="line"><span class="keyword">var</span> item = names.pop();                  <span class="comment">//删除获取最后一项</span></span><br><span class="line">item=names.shift();                      <span class="comment">//删除获取第一项</span></span><br><span class="line">names.splice(<span class="number">2</span>,<span class="number">1</span>,<span class="string">"小季"</span>,<span class="string">"小明"</span>);          <span class="comment">//删除添加数据，修改源数组，第一个参数表示开始删除的位(包含),第二个参数表示要删除的数目，后面参数表示在删除位置处添加的元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//元素读取查找</span></span><br><span class="line"><span class="keyword">var</span> nameitem=names[<span class="number">2</span>];                  <span class="comment">//使用[]读取数组，这是最简单的读取方式</span></span><br><span class="line">names = names.slice(<span class="number">-4</span>,<span class="number">6</span>);              <span class="comment">//读取数组段，不修改源数组，负数表示从右向左数，-1表示末尾第一个元素，0表示首部第一个元素。只有一个参数时表示直到末尾。读取索引包含第一个参数不包含第二个参数</span></span><br><span class="line">names.indexOf(<span class="string">"小明"</span>);                    <span class="comment">//查找匹配元素的位置，没有找到返回-1，lastindexof表示最后匹配的位置。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组的拼接和字符串表示</span></span><br><span class="line">names=names.concat(<span class="string">"小王"</span>,[<span class="string">"小明"</span>,<span class="string">"小黑"</span>]); <span class="comment">//拼接数组，不修改源数组，所以要赋值</span></span><br><span class="line"><span class="keyword">var</span> str=stringnames.join(<span class="string">","</span>);            <span class="comment">//使用间隔字符串连接数组</span></span><br></pre></td></tr></table></figure><p><strong>遍历</strong> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> boolresult = names.every(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;   <span class="comment">//对数组中元素每一项进行布尔运算，返回false和true。every函数，全部元素返回true时返回true。some函数某一元素返回true时返回true</span></span><br><span class="line">    <span class="keyword">return</span> (index&gt;<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> nameresult = names.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;   <span class="comment">//返回数组，filter函数获取满足条件的项，map函数获取每一项计算值的集合，不改变原数组，forEach函数等价于for语句，对每项处理</span></span><br><span class="line">    <span class="keyword">return</span> (index&gt;<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line">nameresult = names.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,cur,index,array</span>)</span>&#123;   <span class="comment">//reduce从前向后迭代，reduceRight从后向前迭代。</span></span><br><span class="line">    <span class="keyword">return</span> prev+<span class="string">"+"</span>+cur;                                    <span class="comment">//迭代从第二项开始，prev初始值为第一项，cur初始值为第二项。计算值自动传给下一函数的prev，返回最后一次迭代产生的值</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a><strong>排序</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">names.reverse();                        <span class="comment">//数组取反</span></span><br><span class="line">names.sort();                           <span class="comment">//数组排序sort(compare)，参数可为排序函数,空元素将排到最后</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">student1,student2</span>)</span>&#123;    <span class="comment">//比较函数，返回-1,0,1</span></span><br><span class="line">    <span class="comment">//return student1.age&lt;student2.age?-1:(student1.age==student2.age?0:1);   //-1表示前对象小，1表示后对象小，0表示相等</span></span><br><span class="line">    <span class="keyword">return</span> student2.age-student1.age;  <span class="comment">//正数自动转化为1，负数转化为-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组原型"><a href="#数组原型" class="headerlink" title="数组原型"></a><strong>数组原型</strong></h2><p>自定义数组原型函数，实现为所有数组添加功能 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">array_max</span>(<span class="params"> </span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>,<span class="keyword">this</span>);    <span class="comment">//max取最大值，min取最小值。还有很多数学运算</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Array</span>.prototype.max = array_max;         <span class="comment">//重写数组原型链</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);     <span class="comment">//应用自定义原型函数</span></span><br><span class="line"><span class="keyword">var</span> y = x.max( );</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数组操作&quot;&gt;&lt;a href=&quot;#数组操作&quot; class=&quot;headerlink&quot; title=&quot;数组操作&quot;&gt;&lt;/a&gt;数组操作&lt;/h1&gt;&lt;h2 id=&quot;js变量类型&quot;&gt;&lt;a href=&quot;#js变量类型&quot; class=&quot;headerlink&quot; title=&quot;js变量类
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://junyizzz.github.io/categories/JavaScript/"/>
    
    
      <category term="Array" scheme="https://junyizzz.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript对象</title>
    <link href="https://junyizzz.github.io/JavaScriptObject/"/>
    <id>https://junyizzz.github.io/JavaScriptObject/</id>
    <published>2018-11-29T02:16:39.000Z</published>
    <updated>2018-11-29T03:02:25.607Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、String对象"><a href="#一、String对象" class="headerlink" title="一、String对象"></a>一、String对象</h1><h2 id="字符串的生成转换"><a href="#字符串的生成转换" class="headerlink" title="字符串的生成转换"></a><strong>字符串的生成转换</strong></h2><p>你可以将任何类型的数据都转换为字符串，你可以用下面三种方法的任何一种：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num= <span class="number">19</span>;                    <span class="comment">// 19</span></span><br><span class="line"><span class="keyword">var</span> myStr = num.toString();     <span class="comment">// "19"</span></span><br><span class="line"><span class="keyword">var</span> myStr = <span class="built_in">String</span>(num);        <span class="comment">// "19"</span></span><br><span class="line"><span class="keyword">var</span> myStr = <span class="string">""</span> +num;            <span class="comment">// "19"</span></span><br></pre></td></tr></table></figure><h2 id="字符串转化为其他类型"><a href="#字符串转化为其他类型" class="headerlink" title="字符串转化为其他类型"></a><strong>字符串转化为其他类型</strong></h2><p>js提供了parseInt()和parseFloat()两个转换函数，Number也可以实现转化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">"1234blue"</span>);   <span class="comment">//returns 1234 </span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"0xA"</span>);        <span class="comment">//returns 10 </span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"22.5"</span>);       <span class="comment">//returns 22 </span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"blue"</span>);       <span class="comment">//returns NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10"</span>, <span class="number">2</span>);      <span class="comment">//returns 2 </span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10"</span>, <span class="number">8</span>);      <span class="comment">//returns 8 </span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10"</span>, <span class="number">10</span>);     <span class="comment">//returns 10</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"AF"</span>, <span class="number">16</span>);     <span class="comment">//returns 175 </span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"1234blue"</span>); <span class="comment">//returns 1234.0 //actually returns 1234</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"0xA"</span>);      <span class="comment">//returns NaN //actually returns 0</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"22.5"</span>);     <span class="comment">//returns 22.5 </span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"22.34.5"</span>);  <span class="comment">//returns 22.34 </span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"0908"</span>);     <span class="comment">//returns 908 </span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"blue"</span>);     <span class="comment">//returns NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">false</span>)           <span class="comment">//0 </span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">true</span>)            <span class="comment">//1 </span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>)       <span class="comment">//NaN </span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">null</span>)            <span class="comment">//0 </span></span><br><span class="line"><span class="built_in">Number</span>( <span class="string">"5.5 "</span>)         <span class="comment">//5.5 </span></span><br><span class="line"><span class="built_in">Number</span>( <span class="string">"56 "</span>)          <span class="comment">//56 </span></span><br><span class="line"><span class="built_in">Number</span>( <span class="string">"5.6.7 "</span>)       <span class="comment">//NaN </span></span><br><span class="line"><span class="built_in">Number</span>(<span class="keyword">new</span> <span class="built_in">Object</span>())    <span class="comment">//NaN </span></span><br><span class="line"><span class="built_in">Number</span>(<span class="number">100</span>)             <span class="comment">//100</span></span><br></pre></td></tr></table></figure><h2 id="字符的操作"><a href="#字符的操作" class="headerlink" title="字符的操作"></a><strong>字符的操作</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myStr = <span class="string">"I,love,you,Do,you,love,me"</span>;</span><br><span class="line"><span class="keyword">var</span> theChar = str.charAt(<span class="number">8</span>);                <span class="comment">//获取指定索引上的字符o</span></span><br><span class="line"><span class="keyword">var</span> theCharcode = myStr.charCodeAt(<span class="number">8</span>);      <span class="comment">//获取指定索引上的字符编码 111</span></span><br></pre></td></tr></table></figure><h3 id="字符串增删查改"><a href="#字符串增删查改" class="headerlink" title="字符串增删查改"></a><strong>字符串增删查改</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//替换</span></span><br><span class="line">name = <span class="string">" Muaneng Tuanpeng "</span>.trim();             <span class="comment">//trim()删除字符串前后空格</span></span><br><span class="line">name =name.replace(<span class="string">"eng"</span>,<span class="string">"ing"</span>);                <span class="comment">//replace替换第一个eng成ing。</span></span><br><span class="line">name =name.replace(<span class="regexp">/eng/g</span>,<span class="string">"ing"</span>);               <span class="comment">//replace接收正则表达式，/g替换全部。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line"><span class="keyword">var</span> beginindex=name.indexOf(<span class="string">"t"</span>,name.length<span class="number">-10</span>);<span class="comment">//indexOf和lastindexOf查询子字符串的位置,第二个参数表示从哪个索引开始向对面搜索。length函数表示取字符串的长度。未查询到时返回-1。</span></span><br><span class="line"><span class="keyword">var</span> endindex = name.lastIndexOf(<span class="string">"g"</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//截取</span></span><br><span class="line"><span class="keyword">var</span> subStr = name.slice(<span class="number">1</span>,<span class="number">5</span>);                   <span class="comment">//读取子字符串，起始下标（包含），结束下标（不包含）</span></span><br><span class="line">name1 = name.substring(beginindex,endindex);    <span class="comment">//slice、substring参数为首尾下标，substr为起点下标和长度。都不改变源字符串。</span></span><br><span class="line">name1 = name.substr(<span class="number">-4</span>);                        <span class="comment">//传入负值时，slice将负值加上字符串长度，substr将第一个负值加上字符串长度，第二个负值转为0，substring将负值都转为0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//拼接</span></span><br><span class="line">name1 = name+<span class="string">"Yes"</span>+<span class="number">1</span>;                           <span class="comment">//使用+号拼接字符串和数据成一个新的字符串</span></span><br><span class="line">name1 = name.concat(<span class="string">"yes"</span>);                     <span class="comment">//也可以使用concat函数拼接字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//大小写转换</span></span><br><span class="line"><span class="keyword">var</span> lowCaseStr = name.toLowerCase();            <span class="comment">//全部转换为小写</span></span><br><span class="line"><span class="keyword">var</span> upCaseStr = name.toUpperCase();             <span class="comment">//全部转化为大写</span></span><br></pre></td></tr></table></figure><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a><strong>字符串比较</strong></h3><p>比较两个字符串，比较是规则是按照字母表顺序比较的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myStr = <span class="string">"chicken"</span>;</span><br><span class="line"><span class="keyword">var</span> myStrTwo = <span class="string">"egg"</span>;</span><br><span class="line"><span class="keyword">var</span> first = myStr.localeCompare(myStrTwo);      <span class="comment">// -1，表示小于</span></span><br><span class="line">first = myStr.localeCompare(<span class="string">"chicken"</span>);         <span class="comment">// 0，表示等于</span></span><br><span class="line">first = myStr.localeCompare(<span class="string">"apple"</span>);           <span class="comment">// 1，表示大于</span></span><br></pre></td></tr></table></figure><h3 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a><strong>字符串分割</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myStr = <span class="string">"I,Love,You,Do,you,love,me"</span>;</span><br><span class="line"><span class="keyword">var</span> substrArray = myStr .split(<span class="string">","</span>);            <span class="comment">// ["I", "Love", "You", "Do", "you", "love", "me"];</span></span><br><span class="line"><span class="keyword">var</span> arrayLimited = myStr .split(<span class="string">","</span>, <span class="number">3</span>)[<span class="number">0</span>];     <span class="comment">// split()的第二个参数，表示返回的字符串数组的最大长度。这里取["I", "Love", "You"]数组的第一个元素，即"I";</span></span><br></pre></td></tr></table></figure><h3 id="字符串原型"><a href="#字符串原型" class="headerlink" title="字符串原型"></a><strong>字符串原型</strong></h3><p>通过修改字符串的原型，可以为所有字符串添加公共函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.startwith = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123;    <span class="comment">//设置字符串引用的原型，为String类型变量添加方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.indexOf(text)==<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> begin = name.startwith(<span class="string">"mu"</span>);               <span class="comment">//调用原型方法</span></span><br></pre></td></tr></table></figure><h1 id="二、Number对象"><a href="#二、Number对象" class="headerlink" title="二、Number对象"></a>二、Number对象</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">number.valueOf()：<span class="comment">//返回数学对象的原始值 </span></span><br><span class="line">number.toExponential(fractionDigits)：<span class="comment">//将数字转换为指数表示形式字符串，fractionDigits指定指数的小数位的位数, 取值区间[0,20].</span></span><br><span class="line">number.toFixed(fractionDigits)：<span class="comment">//将数字表示成10进制字符串, fractionDigits同上.</span></span><br><span class="line">number.toPrecision(precision)：<span class="comment">//与toFixed()类同, 只是precision指定的是数字的有效位数, 取值范围[0,21].</span></span><br><span class="line">number.toString(radix)：<span class="comment">//将number转换为需要的进制字符串形式，radix默认是10.</span></span><br></pre></td></tr></table></figure><h1 id="三、Object对象"><a href="#三、Object对象" class="headerlink" title="三、Object对象"></a>三、Object对象</h1><p>Object对象包含如下属性和方法，也就意味着一切对象（函数也是对象）都包含如下方法。  每种方法和属性在不同的对象中有不同的作用，并不是每种对象都有使用每个方法的必要。 </p><h2 id="constructor属性"><a href="#constructor属性" class="headerlink" title="constructor属性"></a><strong>constructor属性</strong></h2><p>constructor属性是保存当前对象的构造函数，js通过构造函数来实现对象的实例化。</p><p>下面的例子中，constructor保存的就是Object构造函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj1.id = <span class="string">"obj1"</span>;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  <span class="string">"id"</span>: <span class="string">"obj2"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj1.constructor);<span class="comment">//function Object()&#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2.constructor);<span class="comment">//function Object()&#123;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="hasOwnProperty-propertyName-方法"><a href="#hasOwnProperty-propertyName-方法" class="headerlink" title="hasOwnProperty(propertyName)方法"></a><strong>hasOwnProperty(propertyName)方法</strong></h2><p>hasOwnProperty方法接收一个字符串参数，该参数表示属性名称，用来判断该属性是否在当前对象实例中，而不是在对象的原型链中。我们来看看下面这个例子： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];    <span class="comment">//实例化了一个Array对象</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.hasOwnProperty(<span class="string">"length"</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.hasOwnProperty(<span class="string">"hasOwnProperty"</span>));<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>在这个例子中，首先通过定义了一个数组对象的实例arr，我们知道数组对象实际是通过原型链继承了Object对象，然后拥有自己的一些属性，我们通过hasOwnProperty方法判断length是arr自己的属性，而hasOwnProperty是在原型链上的属性。 </p><h2 id="isPrototypeOf-Object-方法"><a href="#isPrototypeOf-Object-方法" class="headerlink" title="isPrototypeOf(Object)方法"></a><strong>isPrototypeOf(Object)方法</strong></h2><p>isPrototype方法接收一个对象，用来判断当前对象是否在传入的参数对象的原型链上，说起来有点抽象，我们来看看代码。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyObject</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> MyObject();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.isPrototypeOf(obj));  <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>我们知道MyObject是继承自Object对象的，而在JS中，继承是通过prototype来实现的，所以Object的prototype必定在MyObject对象实例的原型链上。 </p><h2 id="propertyIsEnumerable-prototypeName-方法"><a href="#propertyIsEnumerable-prototypeName-方法" class="headerlink" title="propertyIsEnumerable(prototypeName)方法"></a>propertyIsEnumerable(prototypeName)方法</h2><p>prototypeIsEnumerable用来判断给定的属性是否可以被for..in语句给枚举出来。看下面代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">"objName"</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(obj.propertyIsEnumerable(<span class="string">"constructor"</span>));<span class="comment">//false1234</span></span><br></pre></td></tr></table></figure><p>判断“constructor”是否可以被枚举，输出false说明无法被枚举出来。</p><h2 id="toLocaleString-方法"><a href="#toLocaleString-方法" class="headerlink" title="toLocaleString()方法"></a>toLocaleString()方法</h2><p>toLocalString方法返回对象的字符串表示，和代码的执行环境有关。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj.toLocaleString());<span class="comment">//[object Object] </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date.toLocaleString());<span class="comment">//2016/2/28 下午1:39:27</span></span><br></pre></td></tr></table></figure><h2 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString()方法"></a><strong>toString()方法</strong></h2><p>toString用来返回对象的字符串表示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj.toString());<span class="comment">//[object Object]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date.toString());<span class="comment">//Sun Feb 28 2016 13:40:36 GMT+0800 (中国标准时间）</span></span><br></pre></td></tr></table></figure><h2 id="valueOf-方法"><a href="#valueOf-方法" class="headerlink" title="valueOf()方法"></a><strong>valueOf()方法</strong></h2><p>valueOf方法返回对象的原始值，可能是字符串、数值或bool值等，看具体的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">"obj"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj.valueOf());<span class="comment">//Object &#123;name: "obj"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.valueOf());<span class="comment">//[1]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date.valueOf());<span class="comment">//1456638436303</span></span><br></pre></td></tr></table></figure><h1 id="四、Date对象"><a href="#四、Date对象" class="headerlink" title="四、Date对象"></a>四、Date对象</h1><p>var date = new Date();  </p><h2 id="属性"><a href="#属性" class="headerlink" title="属性:"></a>属性:</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span> //所建立对象的函数参考 </span><br><span class="line">prototype //能够为对象加入的属性和方法</span><br></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法:"></a>方法:</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">getDay() <span class="comment">//返回一周中的第几天(0-6) </span></span><br><span class="line">getYear() <span class="comment">//返回年份.2000年以前为2位,2000(包含)以后为4位 </span></span><br><span class="line">getFullYear() <span class="comment">//返回完整的4位年份数 </span></span><br><span class="line">getMonth() <span class="comment">//返回月份数(0-11) </span></span><br><span class="line">getDate() <span class="comment">//返回日(1-31) </span></span><br><span class="line">getHours() <span class="comment">//返回小时数(0-23) </span></span><br><span class="line">getMinutes() <span class="comment">//返回分钟(0-59) </span></span><br><span class="line">getSeconds() <span class="comment">//返回秒数(0-59) </span></span><br><span class="line">getMilliseconds() <span class="comment">//返回毫秒(0-999) </span></span><br><span class="line">getUTCDay() <span class="comment">//依据国际时间来得到现在是星期几(0-6) </span></span><br><span class="line">getUTCFullYear() <span class="comment">//依据国际时间来得到完整的年份 </span></span><br><span class="line">getUTCMonth() <span class="comment">//依据国际时间来得到月份(0-11) </span></span><br><span class="line">getUTCDate() <span class="comment">//依据国际时间来得到日(1-31) </span></span><br><span class="line">getUTCHours() <span class="comment">//依据国际时间来得到小时(0-23) </span></span><br><span class="line">getUTCMinutes() <span class="comment">//依据国际时间来返回分钟(0-59) </span></span><br><span class="line">getUTCSeconds() <span class="comment">//依据国际时间来返回秒(0-59) </span></span><br><span class="line">getUTCMilliseconds()<span class="comment">//依据国际时间来返回毫秒(0-999) </span></span><br><span class="line">getTime() <span class="comment">//返回从1970年1月1号0:0:0到现在一共花去的毫秒数 </span></span><br><span class="line">getTimezoneoffset() <span class="comment">//返回时区偏差值,即格林威治平均时间(GMT)与运行脚本的计算机所处时区设置之间相差的分钟数) </span></span><br><span class="line">parse(dateString) <span class="comment">//返回在Date字符串中自从1970年1月1日00:00:00以来的毫秒数 </span></span><br><span class="line">setYear(yearInt) <span class="comment">//设置年份.2位数或4位数 </span></span><br><span class="line">setFullYear(yearInt)<span class="comment">//设置年份.4位数 </span></span><br><span class="line">setMonth(monthInt) <span class="comment">//设置月份(0-11) </span></span><br><span class="line">setDate(dateInt) <span class="comment">//设置日(1-31) </span></span><br><span class="line">setHours(hourInt) <span class="comment">//设置小时数(0-23) </span></span><br><span class="line">setMinutes(minInt) <span class="comment">//设置分钟数(0-59) </span></span><br><span class="line">setSeconds(secInt) <span class="comment">//设置秒数(0-59) </span></span><br><span class="line">setMilliseconds(milliInt) <span class="comment">//设置毫秒(0-999) </span></span><br><span class="line">setUTCFullYear(yearInt) <span class="comment">//依据国际时间来设置年份 </span></span><br><span class="line">setUTCMonth(monthInt) <span class="comment">//依据国际时间来设置月(0-11) </span></span><br><span class="line">setUTCDate(dateInt) <span class="comment">//依据国际时间来设置日(1-31) </span></span><br><span class="line">setUTCHours(hourInt) <span class="comment">//依据国际时间来设置小时 </span></span><br><span class="line">setUTCMinutes(minInt) <span class="comment">//依据国际时间来设置分钟 </span></span><br><span class="line">setUTCSeconds(secInt) <span class="comment">//依据国际时间来设置秒 </span></span><br><span class="line">setUTCMilliseconds(milliInt) <span class="comment">//依据国际时间来设置毫秒 </span></span><br><span class="line">setTime(timeInt) <span class="comment">//设置从1970年1月1日开始的时间.毫秒数 </span></span><br><span class="line">toGMTString() <span class="comment">//根据格林威治时间将Date对象的日期(一个数值)转变成一个GMT时间字符串,如:Weds,15 June l997 14:02:02 GMT </span></span><br><span class="line">toUTCString() <span class="comment">//根据通用时间将一个Date对象的日期转换为一个字符串 </span></span><br><span class="line">toLocaleString() <span class="comment">//把Date对象的日期(一个数值)转变成一个字符串,使用所在计算机上配置使用的特定日期格式 </span></span><br><span class="line">toSource() <span class="comment">//显示对象的源代码 </span></span><br><span class="line">toString() <span class="comment">//将日期对象转换为字符串 </span></span><br><span class="line">UTC(yyyy, mm, dd, hh, mm, ss, msec) <span class="comment">//返回从格林威治标准时间到指定时间的差距,单位为毫秒 </span></span><br><span class="line">valueOf() <span class="comment">//返回日期对象的原始值</span></span><br></pre></td></tr></table></figure><h1 id="五、Math对象"><a href="#五、Math对象" class="headerlink" title="五、Math对象"></a>五、Math对象</h1><h2 id="属性-1"><a href="#属性-1" class="headerlink" title="属性:"></a>属性:</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>      //所建立对象的函数参考</span><br><span class="line">prototype       //能够为对象加入的属性和方法</span><br><span class="line"></span><br><span class="line">E          //欧拉常量,自然对数的底(约等于2.718)</span><br><span class="line">LN2         //2的自然对数(约等于0.693)</span><br><span class="line">LN10         //10的自然对数(约等于2.302)</span><br><span class="line">LOG2E         //以2为底的e的对数.(约等于1.442)</span><br><span class="line">LOG10E         //以10为底的e的对数(约等于0.434)</span><br><span class="line">PI         // ∏的值(约等于3.14159)</span><br><span class="line">SQRT1_2        //1/2(0.5)的平方根(即l除以2的平方根,约等于o.707)</span><br><span class="line">SQRT2         //2的平方根(约等于1.414)</span><br></pre></td></tr></table></figure><h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法:"></a>方法:</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">abs(x)     <span class="comment">//返回数字的绝对值</span></span><br><span class="line">acos(x)   <span class="comment">//返回数字的反余弦值</span></span><br><span class="line">asin(x)   <span class="comment">//返回数字的反正弦值</span></span><br><span class="line">atan(x)   <span class="comment">//返回位于-PI/2 和 PI/2 的反正切值</span></span><br><span class="line">atan2(y,x) <span class="comment">//返回（x,y）位于 -PI 到 PI 之间的角度</span></span><br><span class="line">ceil(x)    <span class="comment">//ceil() 方法执行的是向上取整计算，它返回的是大于或等于x，并且与之最接近的整数。与floor是一对相反的函数</span></span><br><span class="line">cos(x)    <span class="comment">//返回一个数字的余弦值</span></span><br><span class="line">exp(x)    <span class="comment">//返回 E^x 值</span></span><br><span class="line">floor(x)   <span class="comment">//floor() 方法执行的是向下取整计算，它返回的是小于或等于x，并且与之最接近的整数。</span></span><br><span class="line"></span><br><span class="line">log(x)    <span class="comment">//返回底数为E的自然对数</span></span><br><span class="line">max(x,y)    <span class="comment">//返回 x 和 y 之间较大的数</span></span><br><span class="line">min(x,y)  <span class="comment">// 返回 x 和 y 之间较小的数</span></span><br><span class="line">pow(x,y)    <span class="comment">// y^x , 返回 x 的 y 次幂的值</span></span><br><span class="line">random()   <span class="comment">//返回位于 0 到 1 之间的随机函数</span></span><br><span class="line">round(x)    <span class="comment">//四舍五入后取整</span></span><br><span class="line">sin(x)    <span class="comment">//返回数字的正弦值</span></span><br><span class="line">sqrt(x)   <span class="comment">//返回数字的平方根</span></span><br><span class="line">tan(x)    <span class="comment">//返回一个角度的正切值</span></span><br><span class="line">toSource() <span class="comment">//显示对象的源代码</span></span><br><span class="line">valueOf() <span class="comment">//返回数学对象的原始值</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、String对象&quot;&gt;&lt;a href=&quot;#一、String对象&quot; class=&quot;headerlink&quot; title=&quot;一、String对象&quot;&gt;&lt;/a&gt;一、String对象&lt;/h1&gt;&lt;h2 id=&quot;字符串的生成转换&quot;&gt;&lt;a href=&quot;#字符串的生成转换&quot; cla
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://junyizzz.github.io/categories/JavaScript/"/>
    
    
      <category term="Object" scheme="https://junyizzz.github.io/tags/Object/"/>
    
  </entry>
  
  <entry>
    <title>ES6入门</title>
    <link href="https://junyizzz.github.io/ES6/"/>
    <id>https://junyizzz.github.io/ES6/</id>
    <published>2018-11-29T02:05:45.000Z</published>
    <updated>2018-11-29T06:50:30.402Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6-入门"><a href="#ES6-入门" class="headerlink" title="ES6 入门"></a>ES6 入门</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  此手册会收集尽可能多的资料来完善</p><h2 id="1、let-和const"><a href="#1、let-和const" class="headerlink" title="1、let 和const"></a>1、let 和const</h2><p>​    ES6 新增了<code>let</code>命令，用来声明变量。它的用法类似于<code>var</code>，但是所声明的变量，只在<code>let</code>命令所在的代码块内有效。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a <span class="comment">// ReferenceError: a is not defined.</span></span><br><span class="line">b <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p><code>const</code>声明一个只读的常量。一旦声明，常量的值就不能改变。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.1415</span>;</span><br><span class="line">PI <span class="comment">// 3.1415</span></span><br><span class="line"></span><br><span class="line">PI = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><p>上面代码表明改变常量的值会报错。</p><p><code>const</code>声明的变量不得改变值，这意味着，<code>const</code>一旦声明变量，就必须立即初始化，不能留到以后赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo;</span><br><span class="line"><span class="comment">// SyntaxError: Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure><p>上面代码表示，对于<code>const</code>来说，只声明不赋值，就会报错。</p><p><code>const</code>的作用域与<code>let</code>命令相同：只在声明所在的块级作用域内有效。</p><p>在我们开发的时候，可能认为应该默认使用 let 而不是 var，这种情况下，对于需要进行写保护的变量要使用 const。</p><p>然而另一种做法日益普及：默认使用 const，只有当确实需要改变变量的值的时候才使用 let。这是因为大部分的变量的值在初始化后不应再改变，而预料之外的变量的修改是很多 bug 的源头。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 例子 1-1</span><br><span class="line"></span><br><span class="line">// bad</span><br><span class="line">var foo = &apos;bar&apos;;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">let foo = &apos;bar&apos;;</span><br><span class="line"></span><br><span class="line">// better</span><br><span class="line">const foo = &apos;bar&apos;;</span><br></pre></td></tr></table></figure><h2 id="2、模板字符串"><a href="#2、模板字符串" class="headerlink" title="2、模板字符串"></a>2、模板字符串</h2><h3 id="1-模板字符串"><a href="#1-模板字符串" class="headerlink" title="1.模板字符串"></a>1.模板字符串</h3><p>ES6中提供了<strong>模版字符串，**</strong>用`（反引号）标识，用${}将变量括起来**</p><p>需要拼接字符串的时候尽量改成使用模板字符串:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子 2-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">'this is a'</span> + example;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">`this is a <span class="subst">$&#123;example&#125;</span>`</span>;</span><br></pre></td></tr></table></figure><p>在模板字符串中，空格、缩进、换行都会被保留：</p><h3 id="2-标签模板"><a href="#2-标签模板" class="headerlink" title="2. 标签模板"></a>2. 标签模板</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let message = `</span><br><span class="line">Hi,</span><br><span class="line">Daisy!</span><br><span class="line">I am</span><br><span class="line">Kevin.</span><br><span class="line">`;</span><br></pre></td></tr></table></figure><p>出于可读性或者其他原因，我希望书写的时候是换行的，但是最终输出的字符是在一行，这就需要借助模板标签来实现了，我们尝试写一个这样的函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// oneLine 第一版</span><br><span class="line">function oneLine(template, ...expressions) &#123;</span><br><span class="line">    let result = template.reduce((prev, next, i) =&gt; &#123;</span><br><span class="line">        let expression = expressions[i - 1];</span><br><span class="line">        return prev + expression + next;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    result = result.replace(/(\s+)/g, &quot; &quot;);</span><br><span class="line">    result = result.trim();</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现原理很简单，拼合回去然后将多个空白符如换行符、空格等替换成一个空格。</p><p>使用如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let message = oneLine `</span><br><span class="line">    Hi,</span><br><span class="line">    Daisy!</span><br><span class="line">    I am</span><br><span class="line">    Kevin.</span><br><span class="line">`;</span><br><span class="line">console.log(message); // Hi, Daisy! I am Kevin.</span><br></pre></td></tr></table></figure><h2 id="Continue！"><a href="#Continue！" class="headerlink" title="Continue！"></a>Continue！</h2><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>【1】<a href="http://es6.ruanyifeng.com/#docs/let" target="_blank" rel="noopener">阮一峰 ES6入门</a></p><p>【2】<a href="https://juejin.im/post/5bfe05505188252098022400?utm_source=gold_browser_extension" target="_blank" rel="noopener">掘金 ES6完全手册</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ES6-入门&quot;&gt;&lt;a href=&quot;#ES6-入门&quot; class=&quot;headerlink&quot; title=&quot;ES6 入门&quot;&gt;&lt;/a&gt;ES6 入门&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://junyizzz.github.io/categories/JavaScript/"/>
    
    
      <category term="ES6" scheme="https://junyizzz.github.io/tags/ES6/"/>
    
      <category term="JavaScript" scheme="https://junyizzz.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
